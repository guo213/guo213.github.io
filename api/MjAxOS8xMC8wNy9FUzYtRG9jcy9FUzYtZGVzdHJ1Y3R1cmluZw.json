{"title":"ES6-destructuring","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-destructuring","tags":["ES6","ES6-destructuring"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"变量的解构赋值\">变量的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#变量的解构赋值\"></a></h1><h2 id=\"数组的解构赋值\">数组的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#数组的解构赋值\"></a></h2><h3 id=\"基本用法\">基本用法<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#基本用法\"></a></h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></div></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]);</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h3 id=\"默认值\">默认值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#默认值\"></a></h3><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = [];</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>]; <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">'b'</span>] = [<span class=\"string\">'a'</span>, <span class=\"literal\">undefined</span>]; <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaa'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>];</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  x = f();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  x = [<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [];     <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>];    <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [];     <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h2 id=\"对象的解构赋值\">对象的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#对象的解构赋值\"></a></h2><h3 id=\"简介\">简介<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#简介\"></a></h3><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span>&#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，等号右边的对象没有<code>foo</code>属性，所以变量<code>foo</code>取不到值，所以等于<code>undefined</code>。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例一</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; log &#125; = <span class=\"built_in\">console</span>;</span><br><span class=\"line\">log(<span class=\"string\">'hello'</span>) <span class=\"comment\">// hello</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码的例一将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。例二将<code>console.log</code>赋值到<code>log</code>变量。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  p: [</span><br><span class=\"line\">    <span class=\"string\">'Hello'</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  p: [</span><br><span class=\"line\">    <span class=\"string\">'Hello'</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">y</span>: <span class=\"string\">'World'</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; p, <span class=\"attr\">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">  loc: &#123;</span><br><span class=\"line\">    start: &#123;</span><br><span class=\"line\">      line: <span class=\"number\">1</span>,</span><br><span class=\"line\">      column: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; loc, <span class=\"attr\">loc</span>: &#123; start &#125;, <span class=\"attr\">loc</span>: &#123; <span class=\"attr\">start</span>: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc  <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\"></span><br><span class=\"line\">(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">foo</span>: &#123;bar&#125;&#125; = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错。</p>\n<p>注意，对象的解构赋值可以取到继承的属性。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(obj1, obj2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; foo &#125; = obj1;</span><br><span class=\"line\">foo <span class=\"comment\">// \"bar\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，对象<code>obj1</code>的原型对象是<code>obj2</code>。<code>foo</code>属性不是<code>obj1</code>自身的属性，而是继承自<code>obj2</code>的属性，解构赋值可以取到这个属性。</p>\n<h3 id=\"默认值-1\">默认值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#默认值-1\"></a></h3><p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x, y = <span class=\"number\">5</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">x</span>: y = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">'Something went wrong'</span> &#125; = &#123;&#125;;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;x = <span class=\"number\">3</span>&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<h3 id=\"注意点\">注意点<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#注意点\"></a></h3><p>（1）如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">(&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>（2）解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>]);</span><br><span class=\"line\">(&#123;&#125; = <span class=\"string\">'abc'</span>);</span><br><span class=\"line\">(&#123;&#125; = []);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>（3）由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"number\">0</span> : first, [arr.length - <span class=\"number\">1</span>] : last&#125; = arr;</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h2 id=\"字符串的解构赋值\">字符串的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#字符串的解构赋值\"></a></h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"数值和布尔值的解构赋值\">数值和布尔值的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#数值和布尔值的解构赋值\"></a></h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"number\">123</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">toString</span>: s&#125; = <span class=\"literal\">true</span>;</span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span>; <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span>; <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"函数参数的解构赋值\">函数参数的解构赋值<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#函数参数的解构赋值\"></a></h2><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b);</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x, y&#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">'yes'</span></span>) =&gt;</span> x);</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"圆括号问题\">圆括号问题<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#圆括号问题\"></a></h2><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h3 id=\"不能使用圆括号的情况\">不能使用圆括号的情况<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#不能使用圆括号的情况\"></a></h3><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">[(&#123; <span class=\"attr\">p</span>: a &#125;), &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h3 id=\"可以使用圆括号的情况\">可以使用圆括号的情况<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#可以使用圆括号的情况\"></a></h3><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(b)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: (d) &#125; = &#123;&#125;); <span class=\"comment\">// 正确</span></span><br><span class=\"line\">[(<span class=\"built_in\">parseInt</span>.prop)] = [<span class=\"number\">3</span>]; <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h2 id=\"用途\">用途<a href=\"2019/10/07/ES6-Docs/ES6-destructuring#用途\"></a></h2><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125; = &#123;&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"ES6-decorator","link":"2019/10/07/ES6-Docs/ES6-decorator"},"next":{"title":"ES6-intro","link":"2019/10/07/ES6-Docs/ES6-intro"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-destructuring/","toc":[{"title":"变量的解构赋值","id":"变量的解构赋值","index":"1","children":[{"title":"数组的解构赋值","id":"数组的解构赋值","index":"1.1","children":[{"title":"基本用法","id":"基本用法","index":"1.1.1"},{"title":"默认值","id":"默认值","index":"1.1.2"}]},{"title":"对象的解构赋值","id":"对象的解构赋值","index":"1.2","children":[{"title":"简介","id":"简介","index":"1.2.1"},{"title":"默认值","id":"默认值-1","index":"1.2.2"},{"title":"注意点","id":"注意点","index":"1.2.3"}]},{"title":"字符串的解构赋值","id":"字符串的解构赋值","index":"1.3"},{"title":"数值和布尔值的解构赋值","id":"数值和布尔值的解构赋值","index":"1.4"},{"title":"函数参数的解构赋值","id":"函数参数的解构赋值","index":"1.5"},{"title":"圆括号问题","id":"圆括号问题","index":"1.6","children":[{"title":"不能使用圆括号的情况","id":"不能使用圆括号的情况","index":"1.6.1"},{"title":"可以使用圆括号的情况","id":"可以使用圆括号的情况","index":"1.6.2"}]},{"title":"用途","id":"用途","index":"1.7"}]}]}