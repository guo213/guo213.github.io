{"title":"ES6-proposals","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-proposals","tags":["ES6","ES6-proposals"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"最新提案\">最新提案<a href=\"2019/10/07/ES6-Docs/ES6-proposals#最新提案\"></a></h1><p>本章介绍一些尚未进入标准、但很有希望的最新提案。</p>\n<h2 id=\"do-表达式\">do 表达式<a href=\"2019/10/07/ES6-Docs/ES6-proposals#do-表达式\"></a></h2><p>本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = f();</span><br><span class=\"line\">  t = t * t + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，块级作用域将两个语句封装在一起。但是，在块级作用域以外，没有办法得到<code>t</code>的值，因为块级作用域不返回值，除非<code>t</code>是全局变量。</p>\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-do-expressions\" target=\"_blank\" rel=\"noopener\">提案</a>，使得块级作用域可以变为表达式，也就是说可以返回值，办法就是在块级作用域之前加上<code>do</code>，使它变为<code>do</code>表达式，然后就会返回内部最后执行的表达式的值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = f();</span><br><span class=\"line\">  t * t + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，变量<code>x</code>会得到整个块级作用域的返回值（<code>t * t + 1</code>）。</p>\n<p><code>do</code>表达式的逻辑非常简单：封装的是什么，就会返回什么。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 等同于 &lt;表达式&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123; &lt;表达式&gt;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于 &lt;语句&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123; &lt;语句&gt; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>do</code>表达式的好处是可以封装多个语句，让程序更加模块化，就像乐高积木那样一块块拼装起来。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (foo()) &#123; f() &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (bar()) &#123; g() &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123; h() &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码的本质，就是根据函数<code>foo</code>的执行结果，调用不同的函数，将返回结果赋给变量<code>x</code>。使用<code>do</code>表达式，就将这个操作的意图表达得非常简洁清晰。而且，<code>do</code>块级作用域提供了单独的作用域，内部操作可以与全局作用域隔绝。</p>\n<p>值得一提的是，<code>do</code>表达式在 JSX 语法中非常好用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;nav&gt;</span><br><span class=\"line\">    &lt;Home /&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (loggedIn) &#123;</span><br><span class=\"line\">          &lt;LogoutButton /&gt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          &lt;LoginButton /&gt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/nav&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">)</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果不用<code>do</code>表达式，就只能用三元判断运算符（<code>?:</code>）。那样的话，一旦判断逻辑复杂，代码就会变得很不易读。</p>\n<h2 id=\"throw-表达式\">throw 表达式<a href=\"2019/10/07/ES6-Docs/ES6-proposals#throw-表达式\"></a></h2><p>JavaScript 语法规定<code>throw</code>是一个命令，用来抛出错误，不能用于表达式之中。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>console.log</code>的参数必须是一个表达式，如果是一个<code>throw</code>语句就会报错。</p>\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-throw-expressions\" target=\"_blank\" rel=\"noopener\">提案</a>，允许<code>throw</code>用于表达式。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数的默认值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save</span>(<span class=\"params\">filename = throw new TypeError(<span class=\"string\">\"Argument required\"</span></span>)) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数的返回值</span></span><br><span class=\"line\">lint(ast, &#123;</span><br><span class=\"line\">  <span class=\"keyword\">with</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"avoid using 'with' statements.\"</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 条件表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEncoder</span>(<span class=\"params\">encoding</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> encoder = encoding === <span class=\"string\">\"utf8\"</span> ?</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UTF8Encoder() :</span><br><span class=\"line\">    encoding === <span class=\"string\">\"utf16le\"</span> ?</span><br><span class=\"line\">      <span class=\"keyword\">new</span> UTF16Encoder(<span class=\"literal\">false</span>) :</span><br><span class=\"line\">      encoding === <span class=\"string\">\"utf16be\"</span> ?</span><br><span class=\"line\">        <span class=\"keyword\">new</span> UTF16Encoder(<span class=\"literal\">true</span>) :</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Unsupported encoding\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 逻辑表达式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> id() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">set</span> id(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._id = value || <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"Invalid value\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>throw</code>都出现在表达式里面。</p>\n<p>语法上，<code>throw</code>表达式里面的<code>throw</code>不再是一个命令，而是一个运算符。为了避免与<code>throw</code>命令混淆，规定<code>throw</code>出现在行首，一律解释为<code>throw</code>语句，而不是<code>throw</code>表达式。</p>\n<h2 id=\"链判断运算符\">链判断运算符<a href=\"2019/10/07/ES6-Docs/ES6-proposals#链判断运算符\"></a></h2><p>编程实务中，如果读取对象内部的某个属性，往往需要判断一下该对象是否存在。比如，要读取<code>message.body.user.firstName</code>，安全的写法是写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstName = (message</span><br><span class=\"line\">  &amp;&amp; message.body</span><br><span class=\"line\">  &amp;&amp; message.body.user</span><br><span class=\"line\">  &amp;&amp; message.body.user.firstName) || <span class=\"string\">'default'</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>或者使用三元运算符<code>?:</code>，判断一个对象是否存在。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fooInput = myForm.querySelector(<span class=\"string\">'input[name=foo]'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooValue = fooInput ? fooInput.value : <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这样的层层判断非常麻烦，因此现在有一个<a href=\"https://github.com/tc39/proposal-optional-chaining\" target=\"_blank\" rel=\"noopener\">提案</a>，引入了“链判断运算符”（optional chaining operator）<code>?.</code>，简化上面的写法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> firstName = message?.body?.user?.firstName || <span class=\"string\">'default'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> fooValue = myForm.querySelector(<span class=\"string\">'input[name=foo]'</span>)?.value</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码使用了<code>?.</code>运算符，直接在链式调用的时候判断，左侧的对象是否为<code>null</code>或<code>undefined</code>。如果是的，就不再往下运算，而是返回<code>undefined</code>。</p>\n<p>链判断运算符有三种用法。</p>\n<ul>\n<li><code>obj?.prop</code> // 对象属性</li>\n<li><code>obj?.[expr]</code> // 同上</li>\n<li><code>func?.(...args)</code> // 函数或对象方法的调用</li>\n</ul>\n<p>下面是判断对象方法是否存在，如果存在就立即执行的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iterator.return?.()</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>iterator.return</code>如果有定义，就会调用该方法，否则直接返回<code>undefined</code>。</p>\n<p>对于那些可能没有实现的方法，这个运算符尤其有用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (myForm.checkValidity?.() === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 表单校验失败</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，老式浏览器的表单可能没有<code>checkValidity</code>这个方法，这时<code>?.</code>运算符就会返回<code>undefined</code>，判断语句就变成了<code>undefined === false</code>，所以就会跳过下面的代码。</p>\n<p>下面是这个运算符常见的使用形式，以及不使用该运算符时的等价形式。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a?.b</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a.b</span><br><span class=\"line\"></span><br><span class=\"line\">a?.[x]</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a[x]</span><br><span class=\"line\"></span><br><span class=\"line\">a?.b()</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a.b()</span><br><span class=\"line\"></span><br><span class=\"line\">a?.()</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a()</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，特别注意后两种形式，如果<code>a?.b()</code>里面的<code>a.b</code>不是函数，不可调用，那么<code>a?.b()</code>是会报错的。<code>a?.()</code>也是如此，如果<code>a</code>不是<code>null</code>或<code>undefined</code>，但也不是函数，那么<code>a?.()</code>会报错。</p>\n<p>使用这个运算符，有几个注意点。</p>\n<p>（1）短路机制</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a?.[++x]</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a[++x]</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果<code>a</code>是<code>undefined</code>或<code>null</code>，那么<code>x</code>不会进行递增运算。也就是说，链判断运算符一旦为真，右侧的表达式就不再求值。</p>\n<p>（2）delete 运算符</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> a?.b</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : <span class=\"keyword\">delete</span> a.b</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果<code>a</code>是<code>undefined</code>或<code>null</code>，会直接返回<code>undefined</code>，而不会进行<code>delete</code>运算。</p>\n<p>（3）括号不改变运算顺序</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a?.b).c</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\">(a == <span class=\"literal\">null</span> ? <span class=\"literal\">undefined</span> : a.b).c</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>?.</code>对圆括号没有影响，不管<code>a</code>对象是否存在，圆括号后面的<code>.c</code>总是会执行。</p>\n<p>一般来说，使用<code>?.</code>运算符的场合，不应该使用圆括号。</p>\n<p>（4）报错场合</p>\n<p>以下写法是禁止的，会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> a?.()</span><br><span class=\"line\"><span class=\"keyword\">new</span> a?.b()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链判断运算符的右侧有模板字符串</span></span><br><span class=\"line\">a?.<span class=\"string\">`&#123;b&#125;`</span></span><br><span class=\"line\">a?.b<span class=\"string\">`&#123;c&#125;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链判断运算符的左侧是 super</span></span><br><span class=\"line\"><span class=\"keyword\">super</span>?.()</span><br><span class=\"line\"><span class=\"keyword\">super</span>?.foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 链运算符用于赋值运算符左侧</span></span><br><span class=\"line\">a?.b = c</span><br></pre></td></tr></table></div></figure>\n\n<p>（5）右侧不得为十进制数值</p>\n<p>为了保证兼容以前的代码，允许<code>foo?.3:0</code>被解析成<code>foo ? .3 : 0</code>，因此规定如果<code>?.</code>后面紧跟一个十进制数字，那么<code>?.</code>不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。</p>\n<h2 id=\"Null-判断运算符\">Null 判断运算符<a href=\"2019/10/07/ES6-Docs/ES6-proposals#Null-判断运算符\"></a></h2><p>读取对象属性的时候，如果某个属性的值是<code>null</code>或<code>undefined</code>，有时候需要为它们指定默认值。常见做法是通过<code>||</code>运算符指定默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.settings.headerText || <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> animationDuration = response.settings.animationDuration || <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showSplashScreen = response.settings.showSplashScreen || <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的三行代码都通过<code>||</code>运算符指定默认值，但是这样写是错的。开发者的原意是，只要属性的值为<code>null</code>或<code>undefined</code>，默认值就会生效，但是属性的值如果为空字符串或<code>false</code>或<code>0</code>，默认值也会生效。</p>\n<p>为了避免这种情况，现在有一个<a href=\"https://github.com/tc39/proposal-nullish-coalescing\" target=\"_blank\" rel=\"noopener\">提案</a>，引入了一个新的 Null 判断运算符<code>??</code>。它的行为类似<code>||</code>，但是只有运算符左侧的值为<code>null</code>或<code>undefined</code>时，才会返回右侧的值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> headerText = response.settings.headerText ?? <span class=\"string\">'Hello, world!'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> animationDuration = response.settings.animationDuration ?? <span class=\"number\">300</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> showSplashScreen = response.settings.showSplashScreen ?? <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，默认值只有在属性值为<code>null</code>或<code>undefined</code>时，才会生效。</p>\n<p>这个运算符的一个目的，就是跟链判断运算符<code>?.</code>配合使用，为<code>null</code>或<code>undefined</code>的值设置默认值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> animationDuration = response.settings?.animationDuration ?? <span class=\"number\">300</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>response.settings</code>如果是<code>null</code>或<code>undefined</code>，就会返回默认值300。</p>\n<p>这个运算符很适合判断函数参数是否赋值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Component</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> enable = props.enabled ?? <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码判断<code>props</code>参数的<code>enabled</code>属性是否赋值，等同于下面的写法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Component</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    enabled: enable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125; = props;</span><br><span class=\"line\">  <span class=\"comment\">// …</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>??</code>有一个运算优先级问题，它与<code>&amp;&amp;</code>和<code>||</code>的优先级孰高孰低。现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">lhs &amp;&amp; middle ?? rhs</span><br><span class=\"line\">lhs ?? middle &amp;&amp; rhs</span><br><span class=\"line\">lhs || middle ?? rhs</span><br><span class=\"line\">lhs ?? middle || rhs</span><br></pre></td></tr></table></div></figure>\n\n<p>上面四个表达式都会报错，必须加入表明优先级的括号。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(lhs &amp;&amp; middle) ?? rhs;</span><br><span class=\"line\">lhs &amp;&amp; (middle ?? rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">(lhs ?? middle) &amp;&amp; rhs;</span><br><span class=\"line\">lhs ?? (middle &amp;&amp; rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">(lhs || middle) ?? rhs;</span><br><span class=\"line\">lhs || (middle ?? rhs);</span><br><span class=\"line\"></span><br><span class=\"line\">(lhs ?? middle) || rhs;</span><br><span class=\"line\">lhs ?? (middle || rhs);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"函数的部分执行\">函数的部分执行<a href=\"2019/10/07/ES6-Docs/ES6-proposals#函数的部分执行\"></a></h2><h3 id=\"语法\">语法<a href=\"2019/10/07/ES6-Docs/ES6-proposals#语法\"></a></h3><p>多参数的函数有时需要绑定其中的一个或多个参数，然后返回一个新函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add7</span>(<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x + <span class=\"number\">7</span>; &#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>add7</code>函数其实是<code>add</code>函数的一个特殊版本，通过将一个参数绑定为<code>7</code>，就可以从<code>add</code>得到<code>add7</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bind 方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add7 = add.bind(<span class=\"literal\">null</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add7 = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> add(x, <span class=\"number\">7</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面两种写法都有些冗余。其中，<code>bind</code>方法的局限更加明显，它必须提供<code>this</code>，并且只能从前到后一个个绑定参数，无法只绑定非头部的参数。</p>\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-partial-application\" target=\"_blank\" rel=\"noopener\">提案</a>，使得绑定参数并返回一个新函数更加容易。这叫做函数的部分执行（partial application）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"keyword\">const</span> addOne = add(<span class=\"number\">1</span>, ?);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> maxGreaterThanZero = <span class=\"built_in\">Math</span>.max(<span class=\"number\">0</span>, ...);</span><br></pre></td></tr></table></div></figure>\n\n<p>根据新提案，<code>?</code>是单个参数的占位符，<code>...</code>是多个参数的占位符。以下的形式都属于函数的部分执行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x, ?)</span><br><span class=\"line\">f(x, ...)</span><br><span class=\"line\">f(?, x)</span><br><span class=\"line\">f(..., x)</span><br><span class=\"line\">f(?, x, ?)</span><br><span class=\"line\">f(..., x, ...)</span><br></pre></td></tr></table></div></figure>\n\n<p><code>?</code>和<code>...</code>只能出现在函数的调用之中，并且会返回一个新函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> g = f(?, <span class=\"number\">1</span>, ...);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = <span class=\"function\">(<span class=\"params\">x, ...y</span>) =&gt;</span> f(x, <span class=\"number\">1</span>, ...y);</span><br></pre></td></tr></table></div></figure>\n\n<p>函数的部分执行，也可以用于对象的方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  f(x, y) &#123; <span class=\"keyword\">return</span> x + y; &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = obj.f(?, <span class=\"number\">3</span>);</span><br><span class=\"line\">g(<span class=\"number\">1</span>) <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"注意点\">注意点<a href=\"2019/10/07/ES6-Docs/ES6-proposals#注意点\"></a></h3><p>函数的部分执行有一些特别注意的地方。</p>\n<p>（1）函数的部分执行是基于原函数的。如果原函数发生变化，部分执行生成的新函数也会立即反映这种变化。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f(?, <span class=\"number\">3</span>);</span><br><span class=\"line\">g(<span class=\"number\">1</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 替换函数 f</span></span><br><span class=\"line\">f = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x * y;</span><br><span class=\"line\"></span><br><span class=\"line\">g(<span class=\"number\">1</span>); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，定义了函数的部分执行以后，更换原函数会立即影响到新函数。</p>\n<p>（2）如果预先提供的那个值是一个表达式，那么这个表达式并不会在定义时求值，而是在每次调用时求值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f(?, a);</span><br><span class=\"line\">g(<span class=\"number\">1</span>); <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 改变 a 的值</span></span><br><span class=\"line\">a = <span class=\"number\">10</span>;</span><br><span class=\"line\">g(<span class=\"number\">1</span>); <span class=\"comment\">// 11</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，预先提供的参数是变量<code>a</code>，那么每次调用函数<code>g</code>的时候，才会对<code>a</code>进行求值。</p>\n<p>（3）如果新函数的参数多于占位符的数量，那么多余的参数将被忽略。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">x, ...y</span>) =&gt;</span> [x, ...y];</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f(?, <span class=\"number\">1</span>);</span><br><span class=\"line\">g(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// [2, 1]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，函数<code>g</code>只有一个占位符，也就意味着它只能接受一个参数，多余的参数都会被忽略。</p>\n<p>写成下面这样，多余的参数就没有问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">x, ...y</span>) =&gt;</span> [x, ...y];</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f(?, <span class=\"number\">1</span>, ...);</span><br><span class=\"line\">g(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); <span class=\"comment\">// [2, 1, 3, 4];</span></span><br></pre></td></tr></table></div></figure>\n\n<p>（4）<code>...</code>只会被采集一次，如果函数的部分执行使用了多个<code>...</code>，那么每个<code>...</code>的值都将相同。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\">(<span class=\"params\">...x</span>) =&gt;</span> x;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = f(..., <span class=\"number\">9</span>, ...);</span><br><span class=\"line\">g(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [1, 2, 3, 9, 1, 2, 3]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>g</code>定义了两个<code>...</code>占位符，真正执行的时候，它们的值是一样的。</p>\n<h2 id=\"管道运算符\">管道运算符<a href=\"2019/10/07/ES6-Docs/ES6-proposals#管道运算符\"></a></h2><p>Unix 操作系统有一个管道机制（pipeline），可以把前一个操作的值传给后一个操作。这个机制非常有用，使得简单的操作可以组合成为复杂的操作。许多语言都有管道的实现，现在有一个<a href=\"https://github.com/tc39/proposal-pipeline-operator\" target=\"_blank\" rel=\"noopener\">提案</a>，让 JavaScript 也拥有管道机制。</p>\n<p>JavaScript 的管道是一个运算符，写作<code>|&gt;</code>。它的左边是一个表达式，右边是一个函数。管道运算符把左边表达式的值，传入右边的函数进行求值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x |&gt; f</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">f(x)</span><br></pre></td></tr></table></div></figure>\n\n<p>管道运算符最大的好处，就是可以把嵌套的函数，写成从左到右的链式表达式。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doubleSay</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str + <span class=\"string\">\", \"</span> + str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capitalize</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str[<span class=\"number\">0</span>].toUpperCase() + str.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exclaim</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str + <span class=\"string\">'!'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面是三个简单的函数。如果要嵌套执行，传统的写法和管道的写法分别如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统的写法</span></span><br><span class=\"line\">exclaim(capitalize(doubleSay(<span class=\"string\">'hello'</span>)))</span><br><span class=\"line\"><span class=\"comment\">// \"Hello, hello!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 管道的写法</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span></span><br><span class=\"line\">  |&gt; doubleSay</span><br><span class=\"line\">  |&gt; capitalize</span><br><span class=\"line\">  |&gt; exclaim</span><br><span class=\"line\"><span class=\"comment\">// \"Hello, hello!\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>管道运算符只能传递一个值，这意味着它右边的函数必须是一个单参数函数。如果是多参数函数，就必须进行柯里化，改成单参数的版本。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">double</span> (<span class=\"params\">x</span>) </span>&#123; <span class=\"keyword\">return</span> x + x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">x, y</span>) </span>&#123; <span class=\"keyword\">return</span> x + y; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123; <span class=\"attr\">score</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\">person.score</span><br><span class=\"line\">  |&gt; double</span><br><span class=\"line\">  |&gt; (<span class=\"function\"><span class=\"params\">_</span> =&gt;</span> add(<span class=\"number\">7</span>, _))</span><br><span class=\"line\"><span class=\"comment\">// 57</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>add</code>函数需要两个参数。但是，管道运算符只能传入一个值，因此需要事先提供另一个参数，并将其改成单参数的箭头函数<code>_ =&gt; add(7, _)</code>。这个函数里面的下划线并没有特别的含义，可以用其他符号代替，使用下划线只是因为，它能够形象地表示这里是占位符。</p>\n<p>管道运算符对于<code>await</code>函数也适用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x |&gt; <span class=\"keyword\">await</span> f</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> f(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userAge = userId |&gt; <span class=\"keyword\">await</span> fetchUserById |&gt; getAgeFromUser;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> userAge = getAgeFromUser(<span class=\"keyword\">await</span> fetchUserById(userId));</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"数值分隔符\">数值分隔符<a href=\"2019/10/07/ES6-Docs/ES6-proposals#数值分隔符\"></a></h2><p>欧美语言中，较长的数值允许每三位添加一个分隔符（通常是一个逗号），增加数值的可读性。比如，<code>1000</code>可以写作<code>1,000</code>。</p>\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-numeric-separator\" target=\"_blank\" rel=\"noopener\">提案</a>，允许 JavaScript 的数值使用下划线（<code>_</code>）作为分隔符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> budget = <span class=\"number\">1</span>_000_000_000_000;</span><br><span class=\"line\">budget === <span class=\"number\">10</span> ** <span class=\"number\">12</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>JavaScript 的数值分隔符没有指定间隔的位数，也就是说，可以每三位添加一个分隔符，也可以每一位、每两位、每四位添加一个。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">123</span>_00 === <span class=\"number\">12</span>_300 <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12345</span>_00 === <span class=\"number\">123</span>_4500 <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">12345</span>_00 === <span class=\"number\">1</span>_234_500 <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>小数和科学计数法也可以使用数值分隔符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 小数</span></span><br><span class=\"line\"><span class=\"number\">0.000</span>_001</span><br><span class=\"line\"><span class=\"comment\">// 科学计数法</span></span><br><span class=\"line\"><span class=\"number\">1e10</span>_000</span><br></pre></td></tr></table></div></figure>\n\n<p>数值分隔符有几个使用注意点。</p>\n<ul>\n<li>不能在数值的最前面（leading）或最后面（trailing）。</li>\n<li>不能两个或两个以上的分隔符连在一起。</li>\n<li>小数点的前后不能有分隔符。</li>\n<li>科学计数法里面，表示指数的<code>e</code>或<code>E</code>前后不能有分隔符。</li>\n</ul>\n<p>下面的写法都会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"number\">3</span>_<span class=\"number\">.141</span></span><br><span class=\"line\"><span class=\"number\">3.</span>_141</span><br><span class=\"line\"><span class=\"number\">1</span>_e12</span><br><span class=\"line\"><span class=\"number\">1</span>e_12</span><br><span class=\"line\"><span class=\"number\">123</span>__456</span><br><span class=\"line\">_1464301</span><br><span class=\"line\"><span class=\"number\">1464301</span>_</span><br></pre></td></tr></table></div></figure>\n\n<p>除了十进制，其他进制的数值也可以使用分隔符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"number\">0b1010</span>_0001_1000_0101</span><br><span class=\"line\"><span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"number\">0xA0</span>_B0_C0</span><br></pre></td></tr></table></div></figure>\n\n<p>注意，分隔符不能紧跟着进制的前缀<code>0b</code>、<code>0B</code>、<code>0o</code>、<code>0O</code>、<code>0x</code>、<code>0X</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"number\">0</span>_b111111000</span><br><span class=\"line\"><span class=\"number\">0</span>b_111111000</span><br></pre></td></tr></table></div></figure>\n\n<p>下面三个将字符串转成数值的函数，不支持数值分隔符。主要原因是提案的设计者认为，数值分隔符主要是为了编码时书写数值的方便，而不是为了处理外部输入的数据。</p>\n<ul>\n<li>Number()</li>\n<li>parseInt()</li>\n<li>parseFloat()</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">'123_456'</span>) <span class=\"comment\">// NaN</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'123_456'</span>) <span class=\"comment\">// 123</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"BigInt-数据类型\">BigInt 数据类型<a href=\"2019/10/07/ES6-Docs/ES6-proposals#BigInt-数据类型\"></a></h2><h3 id=\"简介\">简介<a href=\"2019/10/07/ES6-Docs/ES6-proposals#简介\"></a></h3><p>JavaScript 所有数字都保存成 64 位浮点数，这给数值的表示带来了两大限制。一是数值的精度只能到 53 个二进制位（相当于 16 个十进制位），大于这个范围的整数，JavaScript 是无法精确表示的，这使得 JavaScript 不适合进行科学和金融方面的精确计算。二是大于或等于2的1024次方的数值，JavaScript 无法表示，会返回<code>Infinity</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 超过 53 个二进制位的数值，无法保持精度</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) === <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">53</span>) + <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 超过 2 的 1024 次方的数值，无法表示</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, <span class=\"number\">1024</span>) <span class=\"comment\">// Infinity</span></span><br></pre></td></tr></table></div></figure>\n\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-bigint\" target=\"_blank\" rel=\"noopener\">提案</a>，引入了一种新的数据类型 BigInt（大整数），来解决这个问题。BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">2172141653</span>n;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">15346349309</span>n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BigInt 可以保持精度</span></span><br><span class=\"line\">a * b <span class=\"comment\">// 33334444555566667777n</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通整数无法保持精度</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(a) * <span class=\"built_in\">Number</span>(b) <span class=\"comment\">// 33334444555566670000</span></span><br></pre></td></tr></table></div></figure>\n\n<p>为了与 Number 类型区别，BigInt 类型的数据必须添加后缀<code>n</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1234</span> <span class=\"comment\">// 普通整数</span></span><br><span class=\"line\"><span class=\"number\">1234</span>n <span class=\"comment\">// BigInt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BigInt 的运算</span></span><br><span class=\"line\"><span class=\"number\">1</span>n + <span class=\"number\">2</span>n <span class=\"comment\">// 3n</span></span><br></pre></td></tr></table></div></figure>\n\n<p>BigInt 同样可以使用各种进制表示，都要加上后缀<code>n</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0b1101</span>n <span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"number\">0o777</span>n <span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"number\">0xFF</span>n <span class=\"comment\">// 十六进制</span></span><br></pre></td></tr></table></div></figure>\n\n<p>BigInt 与普通整数是两种值，它们之间并不相等。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">42</span>n === <span class=\"number\">42</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>typeof</code>运算符对于 BigInt 类型的数据返回<code>bigint</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">123</span>n <span class=\"comment\">// 'bigint'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>BigInt 可以使用负号（<code>-</code>），但是不能使用正号（<code>+</code>），因为会与 asm.js 冲突。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-42</span>n <span class=\"comment\">// 正确</span></span><br><span class=\"line\">+<span class=\"number\">42</span>n <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"BigInt-对象\">BigInt 对象<a href=\"2019/10/07/ES6-Docs/ES6-proposals#BigInt-对象\"></a></h3><p>JavaScript 原生提供<code>BigInt</code>对象，可以用作构造函数生成 BigInt 类型的数值。转换规则基本与<code>Number()</code>一致，将其他类型的值转为 BigInt。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInt(<span class=\"number\">123</span>) <span class=\"comment\">// 123n</span></span><br><span class=\"line\">BigInt(<span class=\"string\">'123'</span>) <span class=\"comment\">// 123n</span></span><br><span class=\"line\">BigInt(<span class=\"literal\">false</span>) <span class=\"comment\">// 0n</span></span><br><span class=\"line\">BigInt(<span class=\"literal\">true</span>) <span class=\"comment\">// 1n</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>BigInt()</code>构造函数必须有参数，而且参数必须可以正常转为数值，下面的用法都会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> BigInt() <span class=\"comment\">// TypeError</span></span><br><span class=\"line\">BigInt(<span class=\"literal\">undefined</span>) <span class=\"comment\">//TypeError</span></span><br><span class=\"line\">BigInt(<span class=\"literal\">null</span>) <span class=\"comment\">// TypeError</span></span><br><span class=\"line\">BigInt(<span class=\"string\">'123n'</span>) <span class=\"comment\">// SyntaxError</span></span><br><span class=\"line\">BigInt(<span class=\"string\">'abc'</span>) <span class=\"comment\">// SyntaxError</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，尤其值得注意字符串<code>123n</code>无法解析成 Number 类型，所以会报错。</p>\n<p>参数如果是小数，也会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BigInt(<span class=\"number\">1.5</span>) <span class=\"comment\">// RangeError</span></span><br><span class=\"line\">BigInt(<span class=\"string\">'1.5'</span>) <span class=\"comment\">// SyntaxError</span></span><br></pre></td></tr></table></div></figure>\n\n<p>BigInt 对象继承了 Object 提供的实例方法。</p>\n<ul>\n<li><code>BigInt.prototype.toLocaleString()</code></li>\n<li><code>BigInt.prototype.toString()</code></li>\n<li><code>BigInt.prototype.valueOf()</code></li>\n</ul>\n<p>此外，还提供了三个静态方法。</p>\n<ul>\n<li><code>BigInt.asUintN(width, BigInt)</code>： 给定的 BigInt 转为 0 到 2<sup>width</sup> - 1 之间对应的值。</li>\n<li><code>BigInt.asIntN(width, BigInt)</code>：给定的 BigInt 转为 -2<sup>width - 1</sup> 到 2<sup>width - 1</sup> - 1 之间对应的值。</li>\n<li><code>BigInt.parseInt(string[, radix])</code>：近似于<code>Number.parseInt()</code>，将一个字符串转换成指定进制的 BigInt。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> max = <span class=\"number\">2</span>n ** (<span class=\"number\">64</span>n - <span class=\"number\">1</span>n) - <span class=\"number\">1</span>n;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt.asIntN(<span class=\"number\">64</span>, max)</span><br><span class=\"line\"><span class=\"comment\">// 9223372036854775807n</span></span><br><span class=\"line\">BigInt.asIntN(<span class=\"number\">64</span>, max + <span class=\"number\">1</span>n)</span><br><span class=\"line\"><span class=\"comment\">// -9223372036854775808n</span></span><br><span class=\"line\">BigInt.asUintN(<span class=\"number\">64</span>, max + <span class=\"number\">1</span>n)</span><br><span class=\"line\"><span class=\"comment\">// 9223372036854775808n</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>max</code>是64位带符号的 BigInt 所能表示的最大值。如果对这个值加<code>1n</code>，<code>BigInt.asIntN()</code>将会返回一个负值，因为这时新增的一位将被解释为符号位。而<code>BigInt.asUintN()</code>方法由于不存在符号位，所以可以正确返回结果。</p>\n<p>如果<code>BigInt.asIntN()</code>和<code>BigInt.asUintN()</code>指定的位数，小于数值本身的位数，那么头部的位将被舍弃。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> max = <span class=\"number\">2</span>n ** (<span class=\"number\">64</span>n - <span class=\"number\">1</span>n) - <span class=\"number\">1</span>n;</span><br><span class=\"line\"></span><br><span class=\"line\">BigInt.asIntN(<span class=\"number\">32</span>, max) <span class=\"comment\">// -1n</span></span><br><span class=\"line\">BigInt.asUintN(<span class=\"number\">32</span>, max) <span class=\"comment\">// 4294967295n</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>max</code>是一个64位的 BigInt，如果转为32位，前面的32位都会被舍弃。</p>\n<p>下面是<code>BigInt.parseInt()</code>的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Number.parseInt() 与 BigInt.parseInt() 的对比</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.parseInt(<span class=\"string\">'9007199254740993'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// 9007199254740992</span></span><br><span class=\"line\">BigInt.parseInt(<span class=\"string\">'9007199254740993'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">// 9007199254740993n</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，由于有效数字超出了最大限度，<code>Number.parseInt</code>方法返回的结果是不精确的，而<code>BigInt.parseInt</code>方法正确返回了对应的 BigInt。</p>\n<p>对于二进制数组，BigInt 新增了两个类型<code>BigUint64Array</code>和<code>BigInt64Array</code>，这两种数据类型返回的都是64位 BigInt。<code>DataView</code>对象的实例方法<code>DataView.prototype.getBigInt64()</code>和<code>DataView.prototype.getBigUint64()</code>，返回的也是 BigInt。</p>\n<h3 id=\"转换规则\">转换规则<a href=\"2019/10/07/ES6-Docs/ES6-proposals#转换规则\"></a></h3><p>可以使用<code>Boolean()</code>、<code>Number()</code>和<code>String()</code>这三个方法，将 BigInt 可以转为布尔值、数值和字符串类型。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">0</span>n) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">Boolean</span>(<span class=\"number\">1</span>n) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"number\">1</span>n)  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>(<span class=\"number\">1</span>n)  <span class=\"comment\">// \"1\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，注意最后一个例子，转为字符串时后缀<code>n</code>会消失。</p>\n<p>另外，取反运算符（<code>!</code>）也可以将 BigInt 转为布尔值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"number\">0</span>n <span class=\"comment\">// true</span></span><br><span class=\"line\">!<span class=\"number\">1</span>n <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数学运算\">数学运算<a href=\"2019/10/07/ES6-Docs/ES6-proposals#数学运算\"></a></h3><p>数学运算方面，BigInt 类型的<code>+</code>、<code>-</code>、<code>*</code>和<code>**</code>这四个二元运算符，与 Number 类型的行为一致。除法运算<code>/</code>会舍去小数部分，返回一个整数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">9</span>n / <span class=\"number\">5</span>n</span><br><span class=\"line\"><span class=\"comment\">// 1n</span></span><br></pre></td></tr></table></div></figure>\n\n<p>几乎所有的数值运算符都可以用在 BigInt，但是有两个例外。</p>\n<ul>\n<li>不带符号的右移位运算符<code>&gt;&gt;&gt;</code></li>\n<li>一元的求正运算符<code>+</code></li>\n</ul>\n<p>上面两个运算符用在 BigInt 会报错。前者是因为<code>&gt;&gt;&gt;</code>运算符是不带符号的，但是 BigInt 总是带有符号的，导致该运算无意义，完全等同于右移运算符<code>&gt;&gt;</code>。后者是因为一元运算符<code>+</code>在 asm.js 里面总是返回 Number 类型，为了不破坏 asm.js 就规定<code>+1n</code>会报错。</p>\n<p>BigInt 不能与普通数值进行混合运算。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>n + <span class=\"number\">1.3</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码报错是因为无论返回的是 BigInt 或 Number，都会导致丢失精度信息。比如<code>(2n**53n + 1n) + 0.5</code>这个表达式，如果返回 BigInt 类型，<code>0.5</code>这个小数部分会丢失；如果返回 Number 类型，有效精度只能保持 53 位，导致精度下降。</p>\n<p>同样的原因，如果一个标准库函数的参数预期是 Number 类型，但是得到的是一个 BigInt，就会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sqrt(<span class=\"number\">4</span>n) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sqrt(<span class=\"built_in\">Number</span>(<span class=\"number\">4</span>n)) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>Math.sqrt</code>的参数预期是 Number 类型，如果是 BigInt 就会报错，必须先用<code>Number</code>方法转一下类型，才能进行计算。</p>\n<p>asm.js 里面，<code>|0</code>跟在一个数值的后面会返回一个32位整数。根据不能与 Number 类型混合运算的规则，BigInt 如果与<code>|0</code>进行运算会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>n | <span class=\"number\">0</span> <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"其他运算\">其他运算<a href=\"2019/10/07/ES6-Docs/ES6-proposals#其他运算\"></a></h3><p>BigInt 对应的布尔值，与 Number 类型一致，即<code>0n</code>会转为<code>false</code>，其他值转为<code>true</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">0</span>n) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'if'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'else'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// else</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>0n</code>对应<code>false</code>，所以会进入<code>else</code>子句。</p>\n<p>比较运算符（比如<code>&gt;</code>）和相等运算符（<code>==</code>）允许 BigInt 与其他类型的值混合计算，因为这样做不会损失精度。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>n &lt; <span class=\"number\">1</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>n &lt; <span class=\"literal\">true</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>n == <span class=\"number\">0</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>n == <span class=\"literal\">false</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"number\">0</span>n === <span class=\"number\">0</span> <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p>BigInt 与字符串混合运算时，会先转为字符串，再进行运算。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">''</span> + <span class=\"number\">123</span>n <span class=\"comment\">// \"123\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Math-signbit\">Math.signbit()<a href=\"2019/10/07/ES6-Docs/ES6-proposals#Math-signbit\"></a></h2><p><code>Math.sign()</code>用来判断一个值的正负，但是如果参数是<code>-0</code>，它会返回<code>-0</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.sign(<span class=\"number\">-0</span>) <span class=\"comment\">// -0</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这导致对于判断符号位的正负，<code>Math.sign()</code>不是很有用。JavaScript 内部使用 64 位浮点数（国际标准 IEEE 754）表示数值，IEEE 754 规定第一位是符号位，<code>0</code>表示正数，<code>1</code>表示负数。所以会有两种零，<code>+0</code>是符号位为<code>0</code>时的零值，<code>-0</code>是符号位为<code>1</code>时的零值。实际编程中，判断一个值是<code>+0</code>还是<code>-0</code>非常麻烦，因为它们是相等的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+<span class=\"number\">0</span> === <span class=\"number\">-0</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>目前，有一个<a href=\"http://jfbastien.github.io/papers/Math.signbit.html\" target=\"_blank\" rel=\"noopener\">提案</a>，引入了<code>Math.signbit()</code>方法判断一个数的符号位是否设置了。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">2</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-2</span>) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">0</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.signbit(<span class=\"number\">-0</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>可以看到，该方法正确返回了<code>-0</code>的符号位是设置了的。</p>\n<p>该方法的算法如下。</p>\n<ul>\n<li>如果参数是<code>NaN</code>，返回<code>false</code></li>\n<li>如果参数是<code>-0</code>，返回<code>true</code></li>\n<li>如果参数是负值，返回<code>true</code></li>\n<li>其他情况返回<code>false</code></li>\n</ul>\n<h2 id=\"双冒号运算符\">双冒号运算符<a href=\"2019/10/07/ES6-Docs/ES6-proposals#双冒号运算符\"></a></h2><p>箭头函数可以绑定<code>this</code>对象，大大减少了显式绑定<code>this</code>对象的写法（<code>call</code>、<code>apply</code>、<code>bind</code>）。但是，箭头函数并不适用于所有场合，所以现在有一个<a href=\"https://github.com/zenparsing/es-function-bind\" target=\"_blank\" rel=\"noopener\">提案</a>，提出了“函数绑定”（function bind）运算符，用来取代<code>call</code>、<code>apply</code>、<code>bind</code>调用。</p>\n<p>函数绑定运算符是并排的两个冒号（<code>::</code>），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即<code>this</code>对象），绑定到右边的函数上面。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo::bar;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.bind(foo);</span><br><span class=\"line\"></span><br><span class=\"line\">foo::bar(...arguments);</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">bar.apply(foo, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hasOwnProperty = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hasOwn</span>(<span class=\"params\">obj, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj::hasOwnProperty(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> method = obj::obj.foo;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> method = ::obj.foo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> log = ::<span class=\"built_in\">console</span>.log;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> log = <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>如果双冒号运算符的运算结果，还是一个对象，就可以采用链式写法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; map, takeWhile, forEach &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"iterlib\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">getPlayers()</span><br><span class=\"line\">::map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.character())</span><br><span class=\"line\">::takeWhile(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.strength &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">::forEach(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"built_in\">console</span>.log(x));</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Realm-API\">Realm API<a href=\"2019/10/07/ES6-Docs/ES6-proposals#Realm-API\"></a></h2><p><a href=\"https://github.com/tc39/proposal-realms\" target=\"_blank\" rel=\"noopener\">Realm API</a> 提供沙箱功能（sandbox），允许隔离代码，防止那些被隔离的代码拿到全局对象。</p>\n<p>以前，经常使用<code>&lt;iframe&gt;</code>作为沙箱。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globalOne = <span class=\"built_in\">window</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'iframe'</span>);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br><span class=\"line\"><span class=\"keyword\">const</span> globalTwo = iframe.contentWindow;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>&lt;iframe&gt;</code>的全局对象是独立的（<code>iframe.contentWindow</code>）。Realm API 可以取代这个功能。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globalOne = <span class=\"built_in\">window</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> globalTwo = <span class=\"keyword\">new</span> Realm().global;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>Realm API</code>单独提供了一个全局对象<code>new Realm().global</code>。</p>\n<p>Realm API 提供一个<code>Realm()</code>构造函数，用来生成一个 Realm 对象。该对象的<code>global</code>属性指向一个新的顶层对象，这个顶层对象跟原始的顶层对象类似。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> globalOne = <span class=\"built_in\">window</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> globalTwo = <span class=\"keyword\">new</span> Realm().global;</span><br><span class=\"line\"></span><br><span class=\"line\">globalOne.evaluate(<span class=\"string\">'1 + 2'</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\">globalTwo.evaluate(<span class=\"string\">'1 + 2'</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，Realm 生成的顶层对象的<code>evaluate()</code>方法，可以运行代码。</p>\n<p>下面的代码可以证明，Realm 顶层对象与原始顶层对象是两个对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = globalOne.evaluate(<span class=\"string\">'[1,2,3]'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = globalTwo.evaluate(<span class=\"string\">'[1,2,3]'</span>);</span><br><span class=\"line\">a1.prototype === a2.prototype; <span class=\"comment\">// false</span></span><br><span class=\"line\">a1 <span class=\"keyword\">instanceof</span> globalTwo.Array; <span class=\"comment\">// false</span></span><br><span class=\"line\">a2 <span class=\"keyword\">instanceof</span> globalOne.Array; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，Realm 沙箱里面的数组的原型对象，跟原始环境里面的数组是不一样的。</p>\n<p>Realm 沙箱里面只能运行 ECMAScript 语法提供的 API，不能运行宿主环境提供的 API。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">globalTwo.evaluate(<span class=\"string\">'console.log(1)'</span>)</span><br><span class=\"line\"><span class=\"comment\">// throw an error: console is undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，Realm 沙箱里面没有<code>console</code>对象，导致报错。因为<code>console</code>不是语法标准，是宿主环境提供的。</p>\n<p>如果要解决这个问题，可以使用下面的代码。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">globalTwo.console = globalOne.console;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>Realm()</code>构造函数可以接受一个参数对象，该参数对象的<code>intrinsics</code>属性可以指定 Realm 沙箱继承原始顶层对象的方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> r1 = <span class=\"keyword\">new</span> Realm();</span><br><span class=\"line\">r1.global === <span class=\"keyword\">this</span>;</span><br><span class=\"line\">r1.global.JSON === <span class=\"built_in\">JSON</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r2 = <span class=\"keyword\">new</span> Realm(&#123; <span class=\"attr\">intrinsics</span>: <span class=\"string\">'inherit'</span> &#125;);</span><br><span class=\"line\">r2.global === <span class=\"keyword\">this</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">r2.global.JSON === <span class=\"built_in\">JSON</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，正常情况下，沙箱的<code>JSON</code>方法不同于原始的<code>JSON</code>对象。但是，<code>Realm()</code>构造函数接受<code>{ intrinsics: &#39;inherit&#39; }</code>作为参数以后，就会继承原始顶层对象的方法。</p>\n<p>用户可以自己定义<code>Realm</code>的子类，用来定制自己的沙箱。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FakeWindow</span> <span class=\"keyword\">extends</span> <span class=\"title\">Realm</span> </span>&#123;</span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.init();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> global = <span class=\"keyword\">this</span>.global;</span><br><span class=\"line\"></span><br><span class=\"line\">    global.document = <span class=\"keyword\">new</span> FakeDocument(...);</span><br><span class=\"line\">    global.alert = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(fakeAlert, &#123; ... &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>FakeWindow</code>模拟了一个假的顶层对象<code>window</code>。</p>\n<h2 id=\"命令\"><code>#!</code>命令<a href=\"2019/10/07/ES6-Docs/ES6-proposals#命令\"></a></h2><p>Unix 的命令行脚本都支持<code>#!</code>命令，又称为 Shebang 或 Hashbang。这个命令放在脚本的第一行，用来指定脚本的执行器。</p>\n<p>比如 Bash 脚本的第一行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br></pre></td></tr></table></div></figure>\n\n<p>Python 脚本的第一行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br></pre></td></tr></table></div></figure>\n\n<p>现在有一个<a href=\"https://github.com/tc39/proposal-hashbang\" target=\"_blank\" rel=\"noopener\">提案</a>，为 JavaScript 脚本引入了<code>#!</code>命令，写在脚本文件或者模块文件的第一行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写在脚本文件第一行</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写在模块文件第一行</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>有了这一行以后，Unix 命令行就可以直接执行脚本。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以前执行脚本的方式</span></span><br><span class=\"line\">$ node hello.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># hashbang 的方式</span></span><br><span class=\"line\">$ hello.js</span><br></pre></td></tr></table></div></figure>\n\n<p>对于 JavaScript 引擎来说，会把<code>#!</code>理解成注释，忽略掉这一行。</p>\n<h2 id=\"import-meta\">import.meta<a href=\"2019/10/07/ES6-Docs/ES6-proposals#import-meta\"></a></h2><p>加载 JavaScript 脚本的时候，有时候需要知道脚本的元信息。Node.js 提供了两个特殊变量<code>__filename</code>和<code>__dirname</code>，用来获取脚本的文件名和所在路径。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> bytes = fs.readFileSync(path.resolve(__dirname, <span class=\"string\">'data.bin'</span>));</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>__dirname</code>用于加载与脚本同一个目录的数据文件<code>data.bin</code>。</p>\n<p>但是，浏览器没有这两个特殊变量。如果需要知道脚本的元信息，就只有手动提供。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">data-option</span>=<span class=\"string\">\"value\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"library.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面这一行 HTML 代码加载 JavaScript 脚本，使用<code>data-</code>属性放入元信息。如果脚本内部要获知元信息，可以像下面这样写。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> theOption = <span class=\"built_in\">document</span>.currentScript.dataset.option;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>document.currentScript</code>属性可以拿到当前脚本的 DOM 节点。</p>\n<p>由于 Node.js 和浏览器做法的不统一，现在有一个<a href=\"https://github.com/tc39/proposal-import-meta\" target=\"_blank\" rel=\"noopener\">提案</a>，提出统一使用<code>import.meta</code>属性在脚本内部获取元信息。这个属性返回一个对象，该对象的各种属性就是当前运行的脚本的元信息。具体包含哪些属性，标准没有规定，由各个运行环境自行决定。</p>\n<p>一般来说，浏览器的<code>import.meta</code>至少会有两个属性。</p>\n<ul>\n<li><code>import.meta.url</code>：脚本的 URL。</li>\n<li><code>import.meta.scriptElement</code>：加载脚本的那个<code>&lt;script&gt;</code>的 DOM 节点，用来替代<code>document.currentScript</code>。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/hamster-displayer.js\"</span> <span class=\"attr\">data-size</span>=<span class=\"string\">\"500\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面这行代码加载的脚本内部，就可以使用<code>import.meta</code>获取元信息。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"keyword\">new</span> URL(<span class=\"string\">\"../hamsters.jpg\"</span>, <span class=\"keyword\">import</span>.meta.url));</span><br><span class=\"line\">  <span class=\"keyword\">const</span> blob = <span class=\"keyword\">await</span> response.blob();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> size = <span class=\"keyword\">import</span>.meta.scriptElement.dataset.size || <span class=\"number\">300</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\">  image.src = URL.createObjectURL(blob);</span><br><span class=\"line\">  image.width = image.height = size;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(image);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>import.meta</code>用来获取所加载的图片的尺寸。</p>\n","prev":{"title":"ES6-promise","link":"2019/10/07/ES6-Docs/ES6-promise"},"next":{"title":"ES6-proxy","link":"2019/10/07/ES6-Docs/ES6-proxy"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-proposals/","toc":[{"title":"最新提案","id":"最新提案","index":"1","children":[{"title":"do 表达式","id":"do-表达式","index":"1.1"},{"title":"throw 表达式","id":"throw-表达式","index":"1.2"},{"title":"链判断运算符","id":"链判断运算符","index":"1.3"},{"title":"Null 判断运算符","id":"Null-判断运算符","index":"1.4"},{"title":"函数的部分执行","id":"函数的部分执行","index":"1.5","children":[{"title":"语法","id":"语法","index":"1.5.1"},{"title":"注意点","id":"注意点","index":"1.5.2"}]},{"title":"管道运算符","id":"管道运算符","index":"1.6"},{"title":"数值分隔符","id":"数值分隔符","index":"1.7"},{"title":"BigInt 数据类型","id":"BigInt-数据类型","index":"1.8","children":[{"title":"简介","id":"简介","index":"1.8.1"},{"title":"BigInt 对象","id":"BigInt-对象","index":"1.8.2"},{"title":"转换规则","id":"转换规则","index":"1.8.3"},{"title":"数学运算","id":"数学运算","index":"1.8.4"},{"title":"其他运算","id":"其他运算","index":"1.8.5"}]},{"title":"Math.signbit()","id":"Math-signbit","index":"1.9"},{"title":"双冒号运算符","id":"双冒号运算符","index":"1.10"},{"title":"Realm API","id":"Realm-API","index":"1.11"},{"title":"<code>#!</code>命令","id":"命令","index":"1.12"},{"title":"import.meta","id":"import-meta","index":"1.13"}]}]}