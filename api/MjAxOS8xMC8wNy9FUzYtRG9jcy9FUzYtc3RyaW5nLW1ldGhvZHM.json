{"title":"ES6-string-methods","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-string-methods","tags":["ES6","ES6-string-methods"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"字符串的新增方法\">字符串的新增方法<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#字符串的新增方法\"></a></h1><p>本章介绍字符串对象的新增方法。</p>\n<h2 id=\"String-fromCodePoint\">String.fromCodePoint()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#String-fromCodePoint\"></a></h2><p>ES5 提供<code>String.fromCharCode()</code>方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于<code>0xFFFF</code>的字符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"ஷ\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>String.fromCharCode()</code>不能识别大于<code>0xFFFF</code>的码点，所以<code>0x20BB7</code>就发生了溢出，最高位<code>2</code>被舍弃了，最后返回码点<code>U+0BB7</code>对应的字符，而不是码点<code>U+20BB7</code>对应的字符。</p>\n<p>ES6 提供了<code>String.fromCodePoint()</code>方法，可以识别大于<code>0xFFFF</code>的字符，弥补了<code>String.fromCharCode()</code>方法的不足。在作用上，正好与下面的<code>codePointAt()</code>方法相反。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>)</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x78</span>, <span class=\"number\">0x1f680</span>, <span class=\"number\">0x79</span>) === <span class=\"string\">'x\\uD83D\\uDE80y'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果<code>String.fromCodePoint</code>方法有多个参数，则它们会被合并成一个字符串返回。</p>\n<p>注意，<code>fromCodePoint</code>方法定义在<code>String</code>对象上，而<code>codePointAt</code>方法定义在字符串的实例对象上。</p>\n<h2 id=\"String-raw\">String.raw()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#String-raw\"></a></h2><p>ES6 还为原生的 String 对象，提供了一个<code>raw()</code>方法。该方法返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，往往用于模板字符串的处理方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\n<span class=\"subst\">$&#123;<span class=\"number\">2</span>+<span class=\"number\">3</span>&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"comment\">// 实际返回 \"Hi\\\\n5!\"，显示的是转义后的结果 \"Hi\\n5!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\u000A!`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实际返回 \"Hi\\\\u000A!\"，显示的是转义后的结果 \"Hi\\u000A!\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果原字符串的斜杠已经转义，那么<code>String.raw()</code>会进行再次转义。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\\\n`</span></span><br><span class=\"line\"><span class=\"comment\">// 返回 \"Hi\\\\\\\\n\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw<span class=\"string\">`Hi\\\\n`</span> === <span class=\"string\">\"Hi\\\\\\\\n\"</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>String.raw()</code>方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。</p>\n<p><code>String.raw()</code>本质上是一个正常的函数，只是专用于模板字符串的标签函数。如果写成正常函数的形式，它的第一个参数，应该是一个具有<code>raw</code>属性的对象，且<code>raw</code>属性的值应该是一个数组，对应模板字符串解析后的值。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// `foo$&#123;1 + 2&#125;bar`</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"built_in\">String</span>.raw(&#123; <span class=\"attr\">raw</span>: [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>] &#125;, <span class=\"number\">1</span> + <span class=\"number\">2</span>) <span class=\"comment\">// \"foo3bar\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>String.raw()</code>方法的第一个参数是一个对象，它的<code>raw</code>属性等同于原始的模板字符串解析后得到的数组。</p>\n<p>作为函数，<code>String.raw()</code>的代码实现基本如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">String</span>.raw = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">strings, ...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; values.length; index++) &#123;</span><br><span class=\"line\">    output += strings.raw[index] + values[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  output += strings.raw[index]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实例方法：codePointAt\">实例方法：codePointAt()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：codePointAt\"></a></h2><p>JavaScript 内部，字符以 UTF-16 的格式储存，每个字符固定为<code>2</code>个字节。对于那些需要<code>4</code>个字节储存的字符（Unicode 码点大于<code>0xFFFF</code>的字符），JavaScript 会认为它们是两个字符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"𠮷\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.length <span class=\"comment\">// 2</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">0</span>) <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charAt(<span class=\"number\">1</span>) <span class=\"comment\">// ''</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">0</span>) <span class=\"comment\">// 55362</span></span><br><span class=\"line\">s.charCodeAt(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是<code>0x20BB7</code>，UTF-16 编码为<code>0xD842 0xDFB7</code>（十进制为<code>55362 57271</code>），需要<code>4</code>个字节储存。对于这种<code>4</code>个字节的字符，JavaScript 不能正确处理，字符串长度会误判为<code>2</code>，而且<code>charAt()</code>方法无法读取整个字符，<code>charCodeAt()</code>方法只能分别返回前两个字节和后两个字节的值。</p>\n<p>ES6 提供了<code>codePointAt()</code>方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>) <span class=\"comment\">// 134071</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">1</span>) <span class=\"comment\">// 57271</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>) <span class=\"comment\">// 97</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>codePointAt()</code>方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的<code>20BB7</code>）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，<code>codePointAt()</code>方法的结果与<code>charCodeAt()</code>方法相同。</p>\n<p>总之，<code>codePointAt()</code>方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与<code>charCodeAt()</code>方法相同。</p>\n<p><code>codePointAt()</code>方法返回的是码点的十进制值，如果想要十六进制的值，可以使用<code>toString()</code>方法转换一下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"20bb7\"</span></span><br><span class=\"line\">s.codePointAt(<span class=\"number\">2</span>).toString(<span class=\"number\">16</span>) <span class=\"comment\">// \"61\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>你可能注意到了，<code>codePointAt()</code>方法的参数，仍然是不正确的。比如，上面代码中，字符<code>a</code>在字符串<code>s</code>的正确位置序号应该是 1，但是必须向<code>codePointAt()</code>方法传入 2。解决这个问题的一个办法是使用<code>for...of</code>循环，因为它会正确识别 32 位的 UTF-16 字符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'𠮷a'</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> ch <span class=\"keyword\">of</span> s) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(ch.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 20bb7</span></span><br><span class=\"line\"><span class=\"comment\">// 61</span></span><br></pre></td></tr></table></div></figure>\n\n<p>另一种方法也可以，使用扩展运算符（<code>...</code>）进行展开运算。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [...<span class=\"string\">'𠮷a'</span>]; <span class=\"comment\">// arr.length === 2</span></span><br><span class=\"line\">arr.forEach(</span><br><span class=\"line\">  ch =&gt; <span class=\"built_in\">console</span>.log(ch.codePointAt(<span class=\"number\">0</span>).toString(<span class=\"number\">16</span>))</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// 20bb7</span></span><br><span class=\"line\"><span class=\"comment\">// 61</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>codePointAt()</code>方法是测试一个字符由两个字节还是由四个字节组成的最简单方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">is32Bit</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.codePointAt(<span class=\"number\">0</span>) &gt; <span class=\"number\">0xFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">is32Bit(<span class=\"string\">\"𠮷\"</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">is32Bit(<span class=\"string\">\"a\"</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实例方法：normalize\">实例方法：normalize()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：normalize\"></a></h2><p>许多欧洲语言有语调符号和重音符号。为了表示它们，Unicode 提供了两种方法。一种是直接提供带重音符号的字符，比如<code>Ǒ</code>（\\u01D1）。另一种是提供合成符号（combining character），即原字符与重音符号的合成，两个字符合成一个字符，比如<code>O</code>（\\u004F）和<code>ˇ</code>（\\u030C）合成<code>Ǒ</code>（\\u004F\\u030C）。</p>\n<p>这两种表示方法，在视觉和语义上都等价，但是 JavaScript 不能识别。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u01D1'</span>===<span class=\"string\">'\\u004F\\u030C'</span> <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u01D1'</span>.length <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">'\\u004F\\u030C'</span>.length <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码表示，JavaScript 将合成字符视为两个字符，导致两种表示方法不相等。</p>\n<p>ES6 提供字符串实例的<code>normalize()</code>方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u01D1'</span>.normalize() === <span class=\"string\">'\\u004F\\u030C'</span>.normalize()</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>normalize</code>方法可以接受一个参数来指定<code>normalize</code>的方式，参数的四个可选值如下。</p>\n<ul>\n<li><code>NFC</code>，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。</li>\n<li><code>NFD</code>，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。</li>\n<li><code>NFKC</code>，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，<code>normalize</code>方法不能识别中文。）</li>\n<li><code>NFKD</code>，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\u004F\\u030C'</span>.normalize(<span class=\"string\">'NFC'</span>).length <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"string\">'\\u004F\\u030C'</span>.normalize(<span class=\"string\">'NFD'</span>).length <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码表示，<code>NFC</code>参数返回字符的合成形式，<code>NFD</code>参数返回字符的分解形式。</p>\n<p>不过，<code>normalize</code>方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。</p>\n<h2 id=\"实例方法：includes-startsWith-endsWith\">实例方法：includes(), startsWith(), endsWith()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：includes-startsWith-endsWith\"></a></h2><p>传统上，JavaScript 只有<code>indexOf</code>方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。</p>\n<ul>\n<li><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串。</li>\n<li><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部。</li>\n<li><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部。</li>\n</ul>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'Hello'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'!'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'o'</span>) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这三个方法都支持第二个参数，表示开始搜索的位置。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">'Hello world!'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.startsWith(<span class=\"string\">'world'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.endsWith(<span class=\"string\">'Hello'</span>, <span class=\"number\">5</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">s.includes(<span class=\"string\">'Hello'</span>, <span class=\"number\">6</span>) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码表示，使用第二个参数<code>n</code>时，<code>endsWith</code>的行为与其他两个方法有所不同。它针对前<code>n</code>个字符，而其他两个方法针对从第<code>n</code>个位置直到字符串结束。</p>\n<h2 id=\"实例方法：repeat\">实例方法：repeat()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：repeat\"></a></h2><p><code>repeat</code>方法返回一个新字符串，表示将原字符串重复<code>n</code>次。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.repeat(<span class=\"number\">3</span>) <span class=\"comment\">// \"xxx\"</span></span><br><span class=\"line\"><span class=\"string\">'hello'</span>.repeat(<span class=\"number\">2</span>) <span class=\"comment\">// \"hellohello\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">0</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>参数如果是小数，会被取整。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">2.9</span>) <span class=\"comment\">// \"nana\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果<code>repeat</code>的参数是负数或者<code>Infinity</code>，会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">Infinity</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// RangeError</span></span><br></pre></td></tr></table></div></figure>\n\n<p>但是，如果参数是 0 到-1 之间的小数，则等同于 0，这是因为会先进行取整运算。0 到-1 之间的小数，取整以后等于<code>-0</code>，<code>repeat</code>视同为 0。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"number\">-0.9</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>参数<code>NaN</code>等同于 0。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"literal\">NaN</span>) <span class=\"comment\">// \"\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果<code>repeat</code>的参数是字符串，则会先转换成数字。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"string\">'na'</span>) <span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"string\">'na'</span>.repeat(<span class=\"string\">'3'</span>) <span class=\"comment\">// \"nanana\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实例方法：padStart-，padEnd\">实例方法：padStart()，padEnd()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：padStart-，padEnd\"></a></h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。<code>padStart()</code>用于头部补全，<code>padEnd()</code>用于尾部补全。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'ababx'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'abax'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">5</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xabab'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xaba'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>padStart()</code>和<code>padEnd()</code>一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。</p>\n<p>如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'xxx'</span>.padStart(<span class=\"number\">2</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xxx'</span></span><br><span class=\"line\"><span class=\"string\">'xxx'</span>.padEnd(<span class=\"number\">2</span>, <span class=\"string\">'ab'</span>) <span class=\"comment\">// 'xxx'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果用来补全的字符串与原字符串，两者的长度之和超过了最大长度，则会截去超出位数的补全字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'abc'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0123456789'</span>)</span><br><span class=\"line\"><span class=\"comment\">// '0123456abc'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果省略第二个参数，默认使用空格补全长度。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'x'</span>.padStart(<span class=\"number\">4</span>) <span class=\"comment\">// '   x'</span></span><br><span class=\"line\"><span class=\"string\">'x'</span>.padEnd(<span class=\"number\">4</span>) <span class=\"comment\">// 'x   '</span></span><br></pre></td></tr></table></div></figure>\n\n<p><code>padStart()</code>的常见用途是为数值补全指定位数。下面代码生成 10 位的数值字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'1'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000001\"</span></span><br><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000000012\"</span></span><br><span class=\"line\"><span class=\"string\">'123456'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'0'</span>) <span class=\"comment\">// \"0000123456\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>另一个用途是提示字符串格式。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-MM-12\"</span></span><br><span class=\"line\"><span class=\"string\">'09-12'</span>.padStart(<span class=\"number\">10</span>, <span class=\"string\">'YYYY-MM-DD'</span>) <span class=\"comment\">// \"YYYY-09-12\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实例方法：trimStart-，trimEnd\">实例方法：trimStart()，trimEnd()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：trimStart-，trimEnd\"></a></h2><p><a href=\"https://github.com/tc39/proposal-string-left-right-trim\" target=\"_blank\" rel=\"noopener\">ES2019</a> 对字符串实例新增了<code>trimStart()</code>和<code>trimEnd()</code>这两个方法。它们的行为与<code>trim()</code>一致，<code>trimStart()</code>消除字符串头部的空格，<code>trimEnd()</code>消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"string\">'  abc  '</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">s.trim() <span class=\"comment\">// \"abc\"</span></span><br><span class=\"line\">s.trimStart() <span class=\"comment\">// \"abc  \"</span></span><br><span class=\"line\">s.trimEnd() <span class=\"comment\">// \"  abc\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>trimStart()</code>只消除头部的空格，保留尾部的空格。<code>trimEnd()</code>也是类似行为。</p>\n<p>除了空格键，这两个方法对字符串头部（或尾部）的 tab 键、换行符等不可见的空白符号也有效。</p>\n<p>浏览器还部署了额外的两个方法，<code>trimLeft()</code>是<code>trimStart()</code>的别名，<code>trimRight()</code>是<code>trimEnd()</code>的别名。</p>\n<h2 id=\"实例方法：matchAll\">实例方法：matchAll()<a href=\"2019/10/07/ES6-Docs/ES6-string-methods#实例方法：matchAll\"></a></h2><p><code>matchAll()</code>方法返回一个正则表达式在当前字符串的所有匹配，详见《正则的扩展》的一章。</p>\n","prev":{"title":"ES6-reflect","link":"2019/10/07/ES6-Docs/ES6-reflect"},"next":{"title":"ES6-style","link":"2019/10/07/ES6-Docs/ES6-style"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-string-methods/","toc":[{"title":"字符串的新增方法","id":"字符串的新增方法","index":"1","children":[{"title":"String.fromCodePoint()","id":"String-fromCodePoint","index":"1.1"},{"title":"String.raw()","id":"String-raw","index":"1.2"},{"title":"实例方法：codePointAt()","id":"实例方法：codePointAt","index":"1.3"},{"title":"实例方法：normalize()","id":"实例方法：normalize","index":"1.4"},{"title":"实例方法：includes(), startsWith(), endsWith()","id":"实例方法：includes-startsWith-endsWith","index":"1.5"},{"title":"实例方法：repeat()","id":"实例方法：repeat","index":"1.6"},{"title":"实例方法：padStart()，padEnd()","id":"实例方法：padStart-，padEnd","index":"1.7"},{"title":"实例方法：trimStart()，trimEnd()","id":"实例方法：trimStart-，trimEnd","index":"1.8"},{"title":"实例方法：matchAll()","id":"实例方法：matchAll","index":"1.9"}]}]}