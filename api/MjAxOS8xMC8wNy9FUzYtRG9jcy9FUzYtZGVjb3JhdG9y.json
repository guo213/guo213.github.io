{"title":"ES6-decorator","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-decorator","tags":["ES6","ES6-decorator"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"装饰器\">装饰器<a href=\"2019/10/07/ES6-Docs/ES6-decorator#装饰器\"></a></h1><p>[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。</p>\n<p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个<a href=\"https://github.com/tc39/proposal-decorators\" target=\"_blank\" rel=\"noopener\">提案</a>将其引入了 ECMAScript。</p>\n<p>装饰器是一种函数，写成<code>@ + 函数名</code>。它可以放在类和类方法的定义前面。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@frozen <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">  @configurable(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  @enumerable(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @throttle(<span class=\"number\">500</span>)</span><br><span class=\"line\">  expensiveMethod() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码一共使用了四个装饰器，一个用在类本身，另外三个用在类方法。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。</p>\n<h2 id=\"类的装饰\">类的装饰<a href=\"2019/10/07/ES6-Docs/ES6-decorator#类的装饰\"></a></h2><p>装饰器可以用来装饰整个类。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>@testable</code>就是一个装饰器。它修改了<code>MyTestableClass</code>这个类的行为，为它加上了静态属性<code>isTestable</code>。<code>testable</code>函数的参数<code>target</code>是<code>MyTestableClass</code>类本身。</p>\n<p>基本上，装饰器的行为就是下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@decorator</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\">A = decorator(A) || A;</span><br></pre></td></tr></table></div></figure>\n\n<p>也就是说，装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>testable</code>函数的参数<code>target</code>，就是会被装饰的类。</p>\n<p>如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">isTestable</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    target.isTestable = isTestable;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyTestableClass.isTestable <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">@testable(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\">MyClass.isTestable <span class=\"comment\">// false</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，装饰器<code>testable</code>可以接受参数，这就等于可以修改装饰器的行为。</p>\n<p>注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。</p>\n<p>前面的例子是为类添加一个静态属性，如果想添加实例属性，可以通过目标类的<code>prototype</code>对象操作。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testable</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">  target.prototype.isTestable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTestableClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyTestableClass();</span><br><span class=\"line\">obj.isTestable <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，装饰器函数<code>testable</code>是在目标类的<code>prototype</code>对象上添加属性，因此就可以在实例上调用。</p>\n<p>下面是另外一个例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mixins.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(target.prototype, ...list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mixins &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mixins'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码通过装饰器<code>mixins</code>，把<code>Foo</code>对象的方法添加到了<code>MyClass</code>的实例上面。可以用<code>Object.assign()</code>模拟这个功能。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(MyClass.prototype, Foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>实际开发中，React 与 Redux 库结合使用时，常常需要写成下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps, mapDispatchToProps)(MyReactComponent);</span><br></pre></td></tr></table></div></figure>\n\n<p>有了装饰器，就可以改写上面的代码。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@connect(mapStateToProps, mapDispatchToProps)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyReactComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>相对来说，后一种写法看上去更容易理解。</p>\n<h2 id=\"方法的装饰\">方法的装饰<a href=\"2019/10/07/ES6-Docs/ES6-decorator#方法的装饰\"></a></h2><p>装饰器不仅可以装饰类，还可以装饰类的属性。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  name() &#123; <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.first&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.last&#125;</span>`</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，装饰器<code>readonly</code>用来装饰“类”的<code>name</code>方法。</p>\n<p>装饰器函数<code>readonly</code>一共可以接受三个参数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// descriptor对象原来的值如下</span></span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   value: specifiedFunction,</span></span><br><span class=\"line\">  <span class=\"comment\">//   enumerable: false,</span></span><br><span class=\"line\">  <span class=\"comment\">//   configurable: true,</span></span><br><span class=\"line\">  <span class=\"comment\">//   writable: true</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;;</span></span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readonly(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br><span class=\"line\"><span class=\"comment\">// 类似于</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</span><br></pre></td></tr></table></div></figure>\n\n<p>装饰器第一个参数是类的原型对象，上例是<code>Person.prototype</code>，装饰器的本意是要“装饰”类的实例，但是这个时候实例还没生成，所以只能去装饰原型（这不同于类的装饰，那种情况时<code>target</code>参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。</p>\n<p>另外，上面代码说明，装饰器（readonly）会修改属性的描述对象（descriptor），然后被修改的描述对象再用来定义属性。</p>\n<p>下面是另一个例子，修改属性描述对象的<code>enumerable</code>属性，使得该属性不可遍历。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @nonenumerable</span><br><span class=\"line\">  <span class=\"keyword\">get</span> kidCount() &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.children.length; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nonenumerable</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.enumerable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>下面的<code>@log</code>装饰器，可以起到输出日志的作用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Math</span> </span>&#123;</span><br><span class=\"line\">  @log</span><br><span class=\"line\">  add(a, b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oldValue = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Calling <span class=\"subst\">$&#123;name&#125;</span> with`</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> math = <span class=\"keyword\">new</span> <span class=\"built_in\">Math</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// passed parameters should get logged now</span></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>@log</code>装饰器的作用就是在执行原始的操作之前，执行一次<code>console.log</code>，从而达到输出日志的目的。</p>\n<p>装饰器有注释的作用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@testable</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  @nonenumerable</span><br><span class=\"line\">  name() &#123; <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.first&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.last&#125;</span>`</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>从上面代码中，我们一眼就能看出，<code>Person</code>类是可测试的，而<code>name</code>方法是只读和不可枚举的。</p>\n<p>下面是使用 Decorator 写法的<a href=\"https://github.com/ionic-team/stencil\" target=\"_blank\" rel=\"noopener\">组件</a>，看上去一目了然。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component(&#123;</span><br><span class=\"line\">  tag: <span class=\"string\">'my-component'</span>,</span><br><span class=\"line\">  styleUrl: <span class=\"string\">'my-component.scss'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyComponent</span> </span>&#123;</span><br><span class=\"line\">  @Prop() first: string;</span><br><span class=\"line\">  @Prop() last: string;</span><br><span class=\"line\">  @State() isVisible: boolean = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;p&gt;Hello, my name is &#123;<span class=\"keyword\">this</span>.first&#125; &#123;<span class=\"keyword\">this</span>.last&#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dec</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'evaluated'</span>, id);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">target, property, descriptor</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'executed'</span>, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> </span>&#123;</span><br><span class=\"line\">    @dec(<span class=\"number\">1</span>)</span><br><span class=\"line\">    @dec(<span class=\"number\">2</span>)</span><br><span class=\"line\">    method()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// evaluated 1</span></span><br><span class=\"line\"><span class=\"comment\">// evaluated 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 2</span></span><br><span class=\"line\"><span class=\"comment\">// executed 1</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，外层装饰器<code>@dec(1)</code>先进入，但是内层装饰器<code>@dec(2)</code>先执行。</p>\n<p>除了注释，装饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 JavaScript 代码静态分析的重要工具。</p>\n<h2 id=\"为什么装饰器不能用于函数？\">为什么装饰器不能用于函数？<a href=\"2019/10/07/ES6-Docs/ES6-decorator#为什么装饰器不能用于函数？\"></a></h2><p>装饰器只能用于类和类的方法，不能用于函数，因为存在函数提升。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  counter++;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@add</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面的代码，意图是执行后<code>counter</code>等于 1，但是实际上结果是<code>counter</code>等于 0。因为函数提升，使得实际执行的代码是下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@add</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> counter;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\">counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  counter++;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readOnly = <span class=\"built_in\">require</span>(<span class=\"string\">\"some-decorator\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">@readOnly</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码也有问题，因为实际执行是下面这样。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> readOnly;</span><br><span class=\"line\"></span><br><span class=\"line\">@readOnly</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">readOnly = <span class=\"built_in\">require</span>(<span class=\"string\">\"some-decorator\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。</p>\n<p>另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello, '</span> + name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loggingDecorator</span>(<span class=\"params\">wrapped</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Starting'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = wrapped.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Finished'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapped = loggingDecorator(doSomething);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"core-decorators-js\">core-decorators.js<a href=\"2019/10/07/ES6-Docs/ES6-decorator#core-decorators-js\"></a></h2><p><a href=\"https://github.com/jayphelps/core-decorators.js\" target=\"_blank\" rel=\"noopener\">core-decorators.js</a>是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。</p>\n<p><strong>（1）@autobind</strong></p>\n<p><code>autobind</code>装饰器使得方法中的<code>this</code>对象，绑定原始对象。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; autobind &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @autobind</span><br><span class=\"line\">  getPerson() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"><span class=\"keyword\">let</span> getPerson = person.getPerson;</span><br><span class=\"line\"></span><br><span class=\"line\">getPerson() === person;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（2）@readonly</strong></p>\n<p><code>readonly</code>装饰器使得属性或方法不可写。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readonly &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meal</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  entree = <span class=\"string\">'steak'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dinner = <span class=\"keyword\">new</span> Meal();</span><br><span class=\"line\">dinner.entree = <span class=\"string\">'salmon'</span>;</span><br><span class=\"line\"><span class=\"comment\">// Cannot assign to read only property 'entree' of [object Object]</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（3）@override</strong></p>\n<p><code>override</code>装饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; override &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  speak(first, second) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  speak() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// SyntaxError: Child#speak() does not properly override Parent#speak(first, second)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Parent</span> </span>&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  speaks() &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">//   Did you mean \"speak\"?</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（4）@deprecate (别名@deprecated)</strong></p>\n<p><code>deprecate</code>或<code>deprecated</code>装饰器在控制台显示一条警告，表示该方法将废除。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; deprecate &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @deprecate</span><br><span class=\"line\">  facepalm() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @deprecate(<span class=\"string\">'We stopped facepalming'</span>)</span><br><span class=\"line\">  facepalmHard() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @deprecate(<span class=\"string\">'We stopped facepalming'</span>, &#123; <span class=\"attr\">url</span>: <span class=\"string\">'http://knowyourmeme.com/memes/facepalm'</span> &#125;)</span><br><span class=\"line\">  facepalmHarder() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person.facepalm();</span><br><span class=\"line\"><span class=\"comment\">// DEPRECATION Person#facepalm: This function will be removed in future versions.</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.facepalmHard();</span><br><span class=\"line\"><span class=\"comment\">// DEPRECATION Person#facepalmHard: We stopped facepalming</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.facepalmHarder();</span><br><span class=\"line\"><span class=\"comment\">// DEPRECATION Person#facepalmHarder: We stopped facepalming</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     See http://knowyourmeme.com/memes/facepalm for more details.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></div></figure>\n\n<p><strong>（5）@suppressWarnings</strong></p>\n<p><code>suppressWarnings</code>装饰器抑制<code>deprecated</code>装饰器导致的<code>console.warn()</code>调用。但是，异步代码发出的调用除外。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; suppressWarnings &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core-decorators'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  @deprecated</span><br><span class=\"line\">  facepalm() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @suppressWarnings</span><br><span class=\"line\">  facepalmWithoutWarning() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.facepalm();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">person.facepalmWithoutWarning();</span><br><span class=\"line\"><span class=\"comment\">// no warning is logged</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"使用装饰器实现自动发布事件\">使用装饰器实现自动发布事件<a href=\"2019/10/07/ES6-Docs/ES6-decorator#使用装饰器实现自动发布事件\"></a></h2><p>我们可以使用装饰器，使得对象的方法被调用时，自动发出一个事件。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> postal = <span class=\"built_in\">require</span>(<span class=\"string\">\"postal/lib/postal.lodash\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publish</span>(<span class=\"params\">topic, channel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> channelName = channel || <span class=\"string\">'/'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> msgChannel = postal.channel(channelName);</span><br><span class=\"line\">  msgChannel.subscribe(topic, v =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'频道: '</span>, channelName);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'事件: '</span>, topic);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据: '</span>, v);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fn = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">    descriptor.value = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> value = fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      msgChannel.publish(topic, value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码定义了一个名为<code>publish</code>的装饰器，它通过改写<code>descriptor.value</code>，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是<a href=\"https://github.com/postaljs/postal.js\" target=\"_blank\" rel=\"noopener\">Postal.js</a>。</p>\n<p>它的用法如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> publish <span class=\"keyword\">from</span> <span class=\"string\">'./publish'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FooComponent</span> </span>&#123;</span><br><span class=\"line\">  @publish(<span class=\"string\">'foo.some.message'</span>, <span class=\"string\">'component'</span>)</span><br><span class=\"line\">  someMethod() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">my</span>: <span class=\"string\">'data'</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @publish(<span class=\"string\">'foo.some.other'</span>)</span><br><span class=\"line\">  anotherMethod() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> FooComponent();</span><br><span class=\"line\"></span><br><span class=\"line\">foo.someMethod();</span><br><span class=\"line\">foo.anotherMethod();</span><br></pre></td></tr></table></div></figure>\n\n<p>以后，只要调用<code>someMethod</code>或者<code>anotherMethod</code>，就会自动发出一个事件。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bash-node index.js</span><br><span class=\"line\">频道:  component</span><br><span class=\"line\">事件:  foo.some.message</span><br><span class=\"line\">数据:  &#123; my: <span class=\"string\">'data'</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">频道:  /</span><br><span class=\"line\">事件:  foo.some.other</span><br><span class=\"line\">数据:  undefined</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Mixin\">Mixin<a href=\"2019/10/07/ES6-Docs/ES6-decorator#Mixin\"></a></h2><p>在装饰器的基础上，可以实现<code>Mixin</code>模式。所谓<code>Mixin</code>模式，就是对象继承的一种替代方案，中文译为“混入”（mix in），意为在一个对象之中混入另外一个对象的方法。</p>\n<p>请看下面的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(MyClass.prototype, Foo);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// 'foo'</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码之中，对象<code>Foo</code>有一个<code>foo</code>方法，通过<code>Object.assign</code>方法，可以将<code>foo</code>方法“混入”<code>MyClass</code>类，导致<code>MyClass</code>的实例<code>obj</code>对象都具有<code>foo</code>方法。这就是“混入”模式的一个简单实现。</p>\n<p>下面，我们部署一个通用脚本<code>mixins.js</code>，将 Mixin 写成一个装饰器。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixins</span>(<span class=\"params\">...list</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(target.prototype, ...list);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后，就可以使用上面这个装饰器，为类“混入”各种方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mixins &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./mixins'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Foo = &#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@mixins(Foo)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>通过<code>mixins</code>这个装饰器，实现了在<code>MyClass</code>类上面“混入”<code>Foo</code>对象的<code>foo</code>方法。</p>\n<p>不过，上面的方法会改写<code>MyClass</code>类的<code>prototype</code>对象，如果不喜欢这一点，也可以通过类的继承实现 Mixin。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyBaseClass</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>MyClass</code>继承了<code>MyBaseClass</code>。如果我们想在<code>MyClass</code>里面“混入”一个<code>foo</code>方法，一个办法是在<code>MyClass</code>和<code>MyBaseClass</code>之间插入一个混入类，这个类具有<code>foo</code>方法，并且继承了<code>MyBaseClass</code>的所有方法，然后<code>MyClass</code>再继承这个类。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> MyMixin = <span class=\"function\">(<span class=\"params\">superclass</span>) =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">superclass</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo from MyMixin'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>MyMixin</code>是一个混入类生成器，接受<code>superclass</code>作为参数，然后返回一个继承<code>superclass</code>的子类，该子类包含一个<code>foo</code>方法。</p>\n<p>接着，目标类再去继承这个混入类，就达到了“混入”<code>foo</code>方法的目的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">MyMixin</span>(<span class=\"title\">MyBaseClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">c.foo(); <span class=\"comment\">// \"foo from MyMixin\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果需要“混入”多个方法，就生成多个混入类。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mixin1</span>(<span class=\"title\">Mixin2</span>(<span class=\"title\">MyBaseClass</span>)) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>这种写法的一个好处，是可以调用<code>super</code>，因此可以避免在“混入”过程中覆盖父类的同名方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Mixin1 = <span class=\"function\">(<span class=\"params\">superclass</span>) =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">superclass</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo from Mixin1'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.foo) <span class=\"keyword\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> Mixin2 = <span class=\"function\">(<span class=\"params\">superclass</span>) =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"keyword\">extends</span> <span class=\"title\">superclass</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo from Mixin2'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.foo) <span class=\"keyword\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo from S'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">Mixin1</span>(<span class=\"title\">Mixin2</span>(<span class=\"title\">S</span>)) </span>&#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo from C'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.foo();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，每一次<code>混入</code>发生时，都调用了父类的<code>super.foo</code>方法，导致父类的同名方法没有被覆盖，行为被保留了下来。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> C().foo()</span><br><span class=\"line\"><span class=\"comment\">// foo from C</span></span><br><span class=\"line\"><span class=\"comment\">// foo from Mixin1</span></span><br><span class=\"line\"><span class=\"comment\">// foo from Mixin2</span></span><br><span class=\"line\"><span class=\"comment\">// foo from S</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"Trait\">Trait<a href=\"2019/10/07/ES6-Docs/ES6-decorator#Trait\"></a></h2><p>Trait 也是一种装饰器，效果与 Mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。</p>\n<p>下面采用<a href=\"https://github.com/CocktailJS/traits-decorator\" target=\"_blank\" rel=\"noopener\">traits-decorator</a>这个第三方模块作为例子。这个模块提供的<code>traits</code>装饰器，不仅可以接受对象，还可以接受 ES6 类作为参数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; traits &#125; <span class=\"keyword\">from</span> <span class=\"string\">'traits-decorator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TFoo</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TBar = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@traits(TFoo, TBar)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// foo</span></span><br><span class=\"line\">obj.bar() <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，通过<code>traits</code>装饰器，在<code>MyClass</code>类上面“混入”了<code>TFoo</code>类的<code>foo</code>方法和<code>TBar</code>对象的<code>bar</code>方法。</p>\n<p>Trait 不允许“混入”同名方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; traits &#125; <span class=\"keyword\">from</span> <span class=\"string\">'traits-decorator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TFoo</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TBar = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>) &#125;,</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@traits(TFoo, TBar)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"comment\">// throw new Error('Method named: ' + methodName + ' is defined twice.');</span></span><br><span class=\"line\"><span class=\"comment\">//        ^</span></span><br><span class=\"line\"><span class=\"comment\">// Error: Method named: foo is defined twice.</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>TFoo</code>和<code>TBar</code>都有<code>foo</code>方法，结果<code>traits</code>装饰器报错。</p>\n<p>一种解决方法是排除<code>TBar</code>的<code>foo</code>方法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; traits, excludes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'traits-decorator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TFoo</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TBar = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>) &#125;,</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@traits(TFoo, <span class=\"attr\">TBar</span>::excludes(<span class=\"string\">'foo'</span>))</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// foo</span></span><br><span class=\"line\">obj.bar() <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码使用绑定运算符（::）在<code>TBar</code>上排除<code>foo</code>方法，混入时就不会报错了。</p>\n<p>另一种方法是为<code>TBar</code>的<code>foo</code>方法起一个别名。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; traits, alias &#125; <span class=\"keyword\">from</span> <span class=\"string\">'traits-decorator'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TFoo</span> </span>&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> TBar = &#123;</span><br><span class=\"line\">  bar() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>) &#125;,</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>) &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">@traits(TFoo, <span class=\"attr\">TBar</span>::alias(&#123;<span class=\"attr\">foo</span>: <span class=\"string\">'aliasFoo'</span>&#125;))</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\">obj.foo() <span class=\"comment\">// foo</span></span><br><span class=\"line\">obj.aliasFoo() <span class=\"comment\">// foo</span></span><br><span class=\"line\">obj.bar() <span class=\"comment\">// bar</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码为<code>TBar</code>的<code>foo</code>方法起了别名<code>aliasFoo</code>，于是<code>MyClass</code>也可以混入<code>TBar</code>的<code>foo</code>方法了。</p>\n<p><code>alias</code>和<code>excludes</code>方法，可以结合起来使用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@traits(TExample::excludes(<span class=\"string\">'foo'</span>,<span class=\"string\">'bar'</span>)::alias(&#123;<span class=\"attr\">baz</span>:<span class=\"string\">'exampleBaz'</span>&#125;))</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码排除了<code>TExample</code>的<code>foo</code>方法和<code>bar</code>方法，为<code>baz</code>方法起了别名<code>exampleBaz</code>。</p>\n<p><code>as</code>方法则为上面的代码提供了另一种写法。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@traits(TExample::<span class=\"keyword\">as</span>(&#123;<span class=\"attr\">excludes</span>:[<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>], <span class=\"attr\">alias</span>: &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'exampleBaz'</span>&#125;&#125;))</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;&#125;</span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"ES6-class-extends","link":"2019/10/07/ES6-Docs/ES6-class-extends"},"next":{"title":"ES6-destructuring","link":"2019/10/07/ES6-Docs/ES6-destructuring"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-decorator/","toc":[{"title":"装饰器","id":"装饰器","index":"1","children":[{"title":"类的装饰","id":"类的装饰","index":"1.1"},{"title":"方法的装饰","id":"方法的装饰","index":"1.2"},{"title":"为什么装饰器不能用于函数？","id":"为什么装饰器不能用于函数？","index":"1.3"},{"title":"core-decorators.js","id":"core-decorators-js","index":"1.4"},{"title":"使用装饰器实现自动发布事件","id":"使用装饰器实现自动发布事件","index":"1.5"},{"title":"Mixin","id":"Mixin","index":"1.6"},{"title":"Trait","id":"Trait","index":"1.7"}]}]}