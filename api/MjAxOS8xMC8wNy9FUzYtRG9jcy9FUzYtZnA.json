{"title":"ES6-fp","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-fp","tags":["ES6","ES6-fp"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"函数式编程\">函数式编程<a href=\"2019/10/07/ES6-Docs/ES6-fp#函数式编程\"></a></h1><p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>\n<p>ES6 的种种新增功能，使得函数式编程变得更方便、更强大。本章介绍 ES6 如何进行函数式编程。</p>\n<h2 id=\"柯里化\">柯里化<a href=\"2019/10/07/ES6-Docs/ES6-fp#柯里化\"></a></h2><p>柯里化（currying）指的是将一个多参数的函数拆分成一系列函数，每个拆分后的函数都只接受一个参数（unary）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，函数<code>add</code>接受两个参数<code>a</code>和<code>b</code>。</p>\n<p>柯里化就是将上面的函数拆分成两个函数，每个函数都只接受一个参数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者采用箭头函数写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> add = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"function\"><span class=\"params\">y</span> =&gt;</span> x + y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = add(<span class=\"number\">1</span>);</span><br><span class=\"line\">f(<span class=\"number\">1</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，函数<code>add</code>只接受一个参数<code>a</code>，返回一个函数<code>f</code>。函数<code>f</code>也只接受一个参数<code>b</code>。</p>\n<h2 id=\"函数合成\">函数合成<a href=\"2019/10/07/ES6-Docs/ES6-fp#函数合成\"></a></h2><p>函数合成（function composition）指的是，将多个函数合成一个函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\"><span class=\"params\">f</span> =&gt;</span> <span class=\"function\"><span class=\"params\">g</span> =&gt;</span> <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f = compose (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x * <span class=\"number\">4</span>) (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">3</span>);</span><br><span class=\"line\">f(<span class=\"number\">2</span>) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>compose</code>就是一个函数合成器，用于将两个函数合成一个函数。</p>\n<p>可以发现，柯里化与函数合成有着密切的联系。前者用于将一个函数拆成多个函数，后者用于将多个函数合并成一个函数。</p>\n<h2 id=\"参数倒置\">参数倒置<a href=\"2019/10/07/ES6-Docs/ES6-fp#参数倒置\"></a></h2><p>参数倒置（flip）指的是改变函数前两个参数的顺序。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divide = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a / b;</span><br><span class=\"line\"><span class=\"keyword\">var</span> flip = f.flip(divide);</span><br><span class=\"line\"></span><br><span class=\"line\">flip(<span class=\"number\">10</span>, <span class=\"number\">5</span>) <span class=\"comment\">// 0.5</span></span><br><span class=\"line\">flip(<span class=\"number\">1</span>, <span class=\"number\">10</span>) <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> three = <span class=\"function\">(<span class=\"params\">a, b, c</span>) =&gt;</span> [a, b, c];</span><br><span class=\"line\"><span class=\"keyword\">var</span> flip = f.flip(three);</span><br><span class=\"line\">flip(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// =&gt; [2, 1, 3]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，如果按照正常的参数顺序，10 除以 5 等于 2。但是，参数倒置以后得到的新函数，结果就是 5 除以 10，结果得到 0.5。如果原函数有 3 个参数，则只颠倒前两个参数的位置。</p>\n<p>参数倒置的代码非常简单。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = &#123;&#125;;</span><br><span class=\"line\">f.flip =</span><br><span class=\"line\">  fn =&gt;</span><br><span class=\"line\">    (a, b, ...args) =&gt; fn(b, a, ...args.reverse());</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"执行边界\">执行边界<a href=\"2019/10/07/ES6-Docs/ES6-fp#执行边界\"></a></h2><p>执行边界（until）指的是函数执行到满足条件为止。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> condition = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x &gt; <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> inc = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> until = f.until(condition, inc);</span><br><span class=\"line\"></span><br><span class=\"line\">until(<span class=\"number\">0</span>) <span class=\"comment\">// 101</span></span><br><span class=\"line\"></span><br><span class=\"line\">condition = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x === <span class=\"number\">5</span>;</span><br><span class=\"line\">until = f.until(condition, inc);</span><br><span class=\"line\"></span><br><span class=\"line\">until(<span class=\"number\">3</span>) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，第一段的条件是执行到<code>x</code>大于 100 为止，所以<code>x</code>初值为 0 时，会一直执行到 101。第二段的条件是执行到等于 5 为止，所以<code>x</code>最后的值是 5。</p>\n<p>执行边界的实现如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = &#123;&#125;;</span><br><span class=\"line\">f.until = <span class=\"function\">(<span class=\"params\">condition, f</span>) =&gt;</span></span><br><span class=\"line\">  (...args) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> r = f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> condition(r) ? r : f.until(condition, f)(r);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码的关键就是，如果满足条件就返回结果，否则不断递归执行。</p>\n<h2 id=\"队列操作\">队列操作<a href=\"2019/10/07/ES6-Docs/ES6-fp#队列操作\"></a></h2><p>队列（list）操作包括以下几种。</p>\n<ul>\n<li><code>head</code>： 取出队列的第一个非空成员。</li>\n<li><code>last</code>： 取出有限队列的最后一个非空成员。</li>\n<li><code>tail</code>： 取出除了“队列头”以外的其他非空成员。</li>\n<li><code>init</code>： 取出除了“队列尾”以外的其他非空成员。</li>\n</ul>\n<p>下面是例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.head(<span class=\"number\">5</span>, <span class=\"number\">27</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\">f.last(<span class=\"number\">5</span>, <span class=\"number\">27</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\">f.tail(<span class=\"number\">5</span>, <span class=\"number\">27</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>) <span class=\"comment\">// [27, 3, 1]</span></span><br><span class=\"line\">f.init(<span class=\"number\">5</span>, <span class=\"number\">27</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>) <span class=\"comment\">// [5, 27, 3]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这些方法的实现如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = &#123;&#125;;</span><br><span class=\"line\">f.head = <span class=\"function\">(<span class=\"params\">...xs</span>) =&gt;</span> xs[<span class=\"number\">0</span>];</span><br><span class=\"line\">f.last = <span class=\"function\">(<span class=\"params\">...xs</span>) =&gt;</span> xs.slice(<span class=\"number\">-1</span>);</span><br><span class=\"line\">f.tail = <span class=\"function\">(<span class=\"params\">...xs</span>) =&gt;</span> <span class=\"built_in\">Array</span>.prototype.slice.call(xs, <span class=\"number\">1</span>);</span><br><span class=\"line\">f.init = <span class=\"function\">(<span class=\"params\">...xs</span>) =&gt;</span> xs.slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"合并操作\">合并操作<a href=\"2019/10/07/ES6-Docs/ES6-fp#合并操作\"></a></h2><p>合并操作分为<code>concat</code>和<code>concatMap</code>两种。前者就是将多个数组合成一个，后者则是先处理一下参数，然后再将处理结果合成一个数组。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.concat([<span class=\"number\">5</span>], [<span class=\"number\">27</span>], [<span class=\"number\">3</span>]) <span class=\"comment\">// [5, 27, 3]</span></span><br><span class=\"line\">f.concatMap(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"string\">'hi '</span> + x, <span class=\"number\">1</span>, [[<span class=\"number\">2</span>]], <span class=\"number\">3</span>) <span class=\"comment\">// ['hi 1', 'hi 2', 'hi 3']</span></span><br></pre></td></tr></table></div></figure>\n\n<p>这两种方法的实现代码如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = &#123;&#125;;</span><br><span class=\"line\">f.concat =</span><br><span class=\"line\">  (...xs) =&gt; xs.reduce(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.concat(b));</span><br><span class=\"line\">f.concatMap =</span><br><span class=\"line\">  (f, ...xs) =&gt; f.concat(xs.map(f));</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"配对操作\">配对操作<a href=\"2019/10/07/ES6-Docs/ES6-fp#配对操作\"></a></h2><p>配对操作分为<code>zip</code>和<code>zipWith</code>两种方法。<code>zip</code>操作将两个队列的成员，一一配对，合成一个新的队列。如果两个队列不等长，较长的那个队列多出来的成员，会被忽略。<code>zipWith</code>操作的第一个参数是一个函数，然后会将后面的队列成员一一配对，输入该函数，返回值就组成一个新的队列。</p>\n<p>下面是例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">f.zip(a, b) <span class=\"comment\">// [[0, 3], [1, 4], [2, 5]]</span></span><br><span class=\"line\">f.zipWith(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b, a, b, c) <span class=\"comment\">// [9, 12, 15]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>zipWith</code>方法的第一个参数是一个求和函数，它将后面三个队列的成员，一一配对进行相加。</p>\n<p>这两个方法的实现如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">f.zip = <span class=\"function\">(<span class=\"params\">...xs</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nple = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = <span class=\"built_in\">Math</span>.min.apply(<span class=\"literal\">null</span>, xs.map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.length));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">    xs.forEach(</span><br><span class=\"line\">      x =&gt; nple.push(x[i])</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    r.push(nple);</span><br><span class=\"line\">    nple = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">f.zipWith = <span class=\"function\">(<span class=\"params\">op, ...xs</span>) =&gt;</span></span><br><span class=\"line\">  f.zip.apply(<span class=\"literal\">null</span>, xs).map(</span><br><span class=\"line\">    (x) =&gt; x.reduce(op)</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"参考链接\">参考链接<a href=\"2019/10/07/ES6-Docs/ES6-fp#参考链接\"></a></h2><ul>\n<li>Mateo Gianolio, <a href=\"http://casualjavascript.com/?1\" target=\"_blank\" rel=\"noopener\">Haskell in ES6: Part 1</a></li>\n</ul>\n","prev":{"title":"ES6-spec","link":"2019/10/07/ES6-Docs/ES6-spec"},"next":{"title":"ES6-array","link":"2019/10/07/ES6-Docs/ES6-array"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-fp/","toc":[{"title":"函数式编程","id":"函数式编程","index":"1","children":[{"title":"柯里化","id":"柯里化","index":"1.1"},{"title":"函数合成","id":"函数合成","index":"1.2"},{"title":"参数倒置","id":"参数倒置","index":"1.3"},{"title":"执行边界","id":"执行边界","index":"1.4"},{"title":"队列操作","id":"队列操作","index":"1.5"},{"title":"合并操作","id":"合并操作","index":"1.6"},{"title":"配对操作","id":"配对操作","index":"1.7"},{"title":"参考链接","id":"参考链接","index":"1.8"}]}]}