{"title":"ES6-string","date":"2019-10-06T16:00:00.000Z","link":"2019/10/07/ES6-Docs/ES6-string","tags":["ES6","ES6-string"],"categories":["ES6"],"updated":"2019-10-07T09:03:34.000Z","content":"<h1 id=\"字符串的扩展\">字符串的扩展<a href=\"2019/10/07/ES6-Docs/ES6-string#字符串的扩展\"></a></h1><p>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。</p>\n<h2 id=\"字符的-Unicode-表示法\">字符的 Unicode 表示法<a href=\"2019/10/07/ES6-Docs/ES6-string#字符的-Unicode-表示法\"></a></h2><p>ES6 加强了对 Unicode 的支持，允许采用<code>\\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 Unicode 码点。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\\u0061\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>但是，这种表示法只限于码点在<code>\\u0000</code>~<code>\\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\\uD842\\uDFB7\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\\u20BB7\"</span></span><br><span class=\"line\"><span class=\"comment\">// \" 7\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码表示，如果直接在<code>\\u</code>后面跟上超过<code>0xFFFF</code>的数值（比如<code>\\u20BB7</code>），JavaScript 会理解成<code>\\u20BB+7</code>。由于<code>\\u20BB</code>是一个不可打印字符，所以只会显示一个空格，后面跟着一个<code>7</code>。</p>\n<p>ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\\u&#123;20BB7&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\\u&#123;41&#125;\\u&#123;42&#125;\\u&#123;43&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"ABC\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> hello = <span class=\"number\">123</span>;</span><br><span class=\"line\">hell\\u&#123;<span class=\"number\">6</span>F&#125; <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;1F680&#125;'</span> === <span class=\"string\">'\\uD83D\\uDE80'</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，最后一个例子表明，大括号表示法与四字节的 UTF-16 编码是等价的。</p>\n<p>有了这种表示法之后，JavaScript 共有 6 种方法可以表示一个字符。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'\\z'</span> === <span class=\"string\">'z'</span>  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\172'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\x7A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\u007A'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">'\\u&#123;7A&#125;'</span> === <span class=\"string\">'z'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"字符串的遍历器接口\">字符串的遍历器接口<a href=\"2019/10/07/ES6-Docs/ES6-string#字符串的遍历器接口\"></a></h2><p>ES6 为字符串添加了遍历器接口（详见《Iterator》一章），使得字符串可以被<code>for...of</code>循环遍历。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> codePoint <span class=\"keyword\">of</span> <span class=\"string\">'foo'</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(codePoint)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"f\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"><span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>除了遍历字符串，这个遍历器最大的优点是可以识别大于<code>0xFFFF</code>的码点，传统的<code>for</code>循环无法识别这样的码点。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> text = <span class=\"built_in\">String</span>.fromCodePoint(<span class=\"number\">0x20BB7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; text.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(text[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" \"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> text) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"𠮷\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，字符串<code>text</code>只有一个字符，但是<code>for</code>循环会认为它包含两个字符（都不可打印），而<code>for...of</code>循环会正确识别出这一个字符。</p>\n<h2 id=\"直接输入-U-2028-和-U-2029\">直接输入 U+2028 和 U+2029<a href=\"2019/10/07/ES6-Docs/ES6-string#直接输入-U-2028-和-U-2029\"></a></h2><p>JavaScript 字符串允许直接输入字符，以及输入字符的转义形式。举例来说，“中”的 Unicode 码点是 U+4e2d，你可以直接在字符串里面输入这个汉字，也可以输入它的转义形式<code>\\u4e2d</code>，两者是等价的。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'中'</span> === <span class=\"string\">'\\u4e2d'</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></div></figure>\n\n<p>但是，JavaScript 规定有5个字符，不能在字符串里面直接使用，只能使用转义形式。</p>\n<ul>\n<li>U+005C：反斜杠（reverse solidus)</li>\n<li>U+000D：回车（carriage return）</li>\n<li>U+2028：行分隔符（line separator）</li>\n<li>U+2029：段分隔符（paragraph separator）</li>\n<li>U+000A：换行符（line feed）</li>\n</ul>\n<p>举例来说，字符串里面不能直接包含反斜杠，一定要转义写成<code>\\\\</code>或者<code>\\u005c</code>。</p>\n<p>这个规定本身没有问题，麻烦在于 JSON 格式允许字符串里面直接使用 U+2028（行分隔符）和 U+2029（段分隔符）。这样一来，服务器输出的 JSON 被<code>JSON.parse</code>解析，就有可能直接报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> json = <span class=\"string\">'\"\\u2028\"'</span>;</span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(json); <span class=\"comment\">// 可能报错</span></span><br></pre></td></tr></table></div></figure>\n\n<p>JSON 格式已经冻结（RFC 7159），没法修改了。为了消除这个报错，<a href=\"https://github.com/tc39/proposal-json-superset\" target=\"_blank\" rel=\"noopener\">ES2019</a> 允许 JavaScript 字符串直接输入 U+2028（行分隔符）和 U+2029（段分隔符）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> PS = <span class=\"built_in\">eval</span>(<span class=\"string\">\"'\\u2029'\"</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>根据这个提案，上面的代码不会报错。</p>\n<p>注意，模板字符串现在就允许直接输入这两个字符。另外，正则表达式依然不允许直接输入这两个字符，这是没有问题的，因为 JSON 本来就不允许直接包含正则表达式。</p>\n<h2 id=\"JSON-stringify-的改造\">JSON.stringify() 的改造<a href=\"2019/10/07/ES6-Docs/ES6-string#JSON-stringify-的改造\"></a></h2><p>根据标准，JSON 数据必须是 UTF-8 编码。但是，现在的<code>JSON.stringify()</code>方法有可能返回不符合 UTF-8 标准的字符串。</p>\n<p>具体来说，UTF-8 标准规定，<code>0xD800</code>到<code>0xDFFF</code>之间的码点，不能单独使用，必须配对使用。比如，<code>\\uD834\\uDF06</code>是两个码点，但是必须放在一起配对使用，代表字符<code>𝌆</code>。这是为了表示码点大于<code>0xFFFF</code>的字符的一种变通方法。单独使用<code>\\uD834</code>和<code>\\uDFO6</code>这两个码点是不合法的，或者颠倒顺序也不行，因为<code>\\uDF06\\uD834</code>并没有对应的字符。</p>\n<p><code>JSON.stringify()</code>的问题在于，它可能返回<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'\\u&#123;D834&#125;'</span>) <span class=\"comment\">// \"\\u&#123;D834&#125;\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>为了确保返回的是合法的 UTF-8 字符，<a href=\"https://github.com/tc39/proposal-well-formed-stringify\" target=\"_blank\" rel=\"noopener\">ES2019</a> 改变了<code>JSON.stringify()</code>的行为。如果遇到<code>0xD800</code>到<code>0xDFFF</code>之间的单个码点，或者不存在的配对形式，它会返回转义字符串，留给应用自己决定下一步的处理。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'\\u&#123;D834&#125;'</span>) <span class=\"comment\">// \"\"\\\\uD834\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(<span class=\"string\">'\\uDF06\\uD834'</span>) <span class=\"comment\">// \"\"\\\\udf06\\\\ud834\"\"</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"模板字符串\">模板字符串<a href=\"2019/10/07/ES6-Docs/ES6-string#模板字符串\"></a></h2><p>传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#result'</span>).append(</span><br><span class=\"line\">  <span class=\"string\">'There are &lt;b&gt;'</span> + basket.count + <span class=\"string\">'&lt;/b&gt; '</span> +</span><br><span class=\"line\">  <span class=\"string\">'items in your basket, '</span> +</span><br><span class=\"line\">  <span class=\"string\">'&lt;em&gt;'</span> + basket.onSale +</span><br><span class=\"line\">  <span class=\"string\">'&lt;/em&gt; are on sale!'</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#result'</span>).append(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  There are &lt;b&gt;<span class=\"subst\">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class=\"line\"><span class=\"string\">   in your basket, &lt;em&gt;<span class=\"subst\">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"string\">  are on sale!</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>模板字符串（template string）是增强版的字符串，用反引号（&#96;）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript '\\n' is a line-feed.`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多行字符串</span></span><br><span class=\"line\"><span class=\"string\">`In JavaScript this is</span></span><br><span class=\"line\"><span class=\"string\"> not legal.`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`string text line 1</span></span><br><span class=\"line\"><span class=\"string\">string text line 2`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 字符串中嵌入变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"Bob\"</span>, time = <span class=\"string\">\"today\"</span>;</span><br><span class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>, how are you <span class=\"subst\">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> greeting = <span class=\"string\">`\\`Yo\\` World!`</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#list'</span>).html(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li&gt;first&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li&gt;second&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，所有模板字符串的空格和换行，都是被保留的，比如<code>&lt;ul&gt;</code>标签前面会有一个换行。如果你不想要这个换行，可以使用<code>trim</code>方法消除它。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#list'</span>).html(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li&gt;first&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;li&gt;second&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>.trim());</span><br></pre></td></tr></table></div></figure>\n\n<p>模板字符串中嵌入变量，需要将变量名写在<code>${}</code>之中。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">authorize</span>(<span class=\"params\">user, action</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!user.hasPrivilege(action)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">      <span class=\"comment\">// 传统写法为</span></span><br><span class=\"line\">      <span class=\"comment\">// 'User '</span></span><br><span class=\"line\">      <span class=\"comment\">// + user.name</span></span><br><span class=\"line\">      <span class=\"comment\">// + ' is not authorized to do '</span></span><br><span class=\"line\">      <span class=\"comment\">// + action</span></span><br><span class=\"line\">      <span class=\"comment\">// + '.'</span></span><br><span class=\"line\">      <span class=\"string\">`User <span class=\"subst\">$&#123;user.name&#125;</span> is not authorized to do <span class=\"subst\">$&#123;action&#125;</span>.`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y&#125;</span> = <span class=\"subst\">$&#123;x + y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 2 = 3\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span> + <span class=\"subst\">$&#123;y * <span class=\"number\">2</span>&#125;</span> = <span class=\"subst\">$&#123;x + y * <span class=\"number\">2</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"1 + 4 = 5\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"string\">`<span class=\"subst\">$&#123;obj.x + obj.y&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"3\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>模板字符串之中还能调用函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`foo <span class=\"subst\">$&#123;fn()&#125;</span> bar`</span></span><br><span class=\"line\"><span class=\"comment\">// foo Hello World bar</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的<code>toString</code>方法。</p>\n<p>如果模板字符串中的变量没有声明，将报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量place没有声明</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">`Hello, <span class=\"subst\">$&#123;place&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></div></figure>\n\n<p>由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"string\">'World'</span>&#125;</span>`</span></span><br><span class=\"line\"><span class=\"comment\">// \"Hello World\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>模板字符串甚至还能嵌套。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> tmpl = <span class=\"function\"><span class=\"params\">addrs</span> =&gt;</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;table&gt;</span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$&#123;addrs.map(addr =&gt; <span class=\"string\">`</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">    &lt;tr&gt;&lt;td&gt;<span class=\"subst\">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">  `</span>).join(<span class=\"string\">''</span>)&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，模板字符串的变量之中，又嵌入了另一个模板字符串，使用方法如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'&lt;Jane&gt;'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Bond'</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">first</span>: <span class=\"string\">'Lars'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'&lt;Croft&gt;'</span> &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tmpl(data));</span><br><span class=\"line\"><span class=\"comment\">// &lt;table&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Jane&gt;&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Bond&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;Lars&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//   &lt;tr&gt;&lt;td&gt;&lt;Croft&gt;&lt;/td&gt;&lt;/tr&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/table&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>如果需要引用模板字符串本身，在需要时执行，可以写成函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> func = <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</span><br><span class=\"line\">func(<span class=\"string\">'Jack'</span>) <span class=\"comment\">// \"Hello Jack!\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，模板字符串写成了一个函数的返回值。执行这个函数，就相当于执行这个模板字符串了。</p>\n<h2 id=\"实例：模板编译\">实例：模板编译<a href=\"2019/10/07/ES6-Docs/ES6-string#实例：模板编译\"></a></h2><p>下面，我们来看一个通过模板字符串，生成正式模板的实例。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> template = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;% for(let i=0; i &lt; data.supplies.length; i++) &#123; %&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;li&gt;&lt;%= data.supplies[i] %&gt;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;% &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码在模板字符串之中，放置了一个常规模板。该模板使用<code>&lt;%...%&gt;</code>放置 JavaScript 代码，使用<code>&lt;%= ... %&gt;</code>输出 JavaScript 表达式。</p>\n<p>怎么编译这个模板字符串呢？</p>\n<p>一种思路是将其转换为 JavaScript 表达式字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo(<span class=\"string\">'&lt;ul&gt;'</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; data.supplies.length; i++) &#123;</span><br><span class=\"line\">  echo(<span class=\"string\">'&lt;li&gt;'</span>);</span><br><span class=\"line\">  echo(data.supplies[i]);</span><br><span class=\"line\">  echo(<span class=\"string\">'&lt;/li&gt;'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">echo(<span class=\"string\">'&lt;/ul&gt;'</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>这个转换使用正则表达式就行了。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> evalExpr = <span class=\"regexp\">/&lt;%=(.+?)%&gt;/g</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> expr = <span class=\"regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">template = template</span><br><span class=\"line\">  .replace(evalExpr, <span class=\"string\">'`); \\n  echo( $1 ); \\n  echo(`'</span>)</span><br><span class=\"line\">  .replace(expr, <span class=\"string\">'`); \\n $1 \\n  echo(`'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">template = <span class=\"string\">'echo(`'</span> + template + <span class=\"string\">'`);'</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>然后，将<code>template</code>封装在一个函数里面返回，就可以了。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> script =</span><br><span class=\"line\"><span class=\"string\">`(function parse(data)&#123;</span></span><br><span class=\"line\"><span class=\"string\">  let output = \"\";</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  function echo(html)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    output += html;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  <span class=\"subst\">$&#123; template &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">  return output;</span></span><br><span class=\"line\"><span class=\"string\">&#125;)`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> script;</span><br></pre></td></tr></table></div></figure>\n\n<p>将上面的内容拼装成一个模板编译函数<code>compile</code>。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">template</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> evalExpr = <span class=\"regexp\">/&lt;%=(.+?)%&gt;/g</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> expr = <span class=\"regexp\">/&lt;%([\\s\\S]+?)%&gt;/g</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  template = template</span><br><span class=\"line\">    .replace(evalExpr, <span class=\"string\">'`); \\n  echo( $1 ); \\n  echo(`'</span>)</span><br><span class=\"line\">    .replace(expr, <span class=\"string\">'`); \\n $1 \\n  echo(`'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  template = <span class=\"string\">'echo(`'</span> + template + <span class=\"string\">'`);'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> script =</span><br><span class=\"line\">  <span class=\"string\">`(function parse(data)&#123;</span></span><br><span class=\"line\"><span class=\"string\">    let output = \"\";</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    function echo(html)&#123;</span></span><br><span class=\"line\"><span class=\"string\">      output += html;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    <span class=\"subst\">$&#123; template &#125;</span></span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    return output;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;)`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> script;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>compile</code>函数的用法如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> parse = <span class=\"built_in\">eval</span>(compile(template));</span><br><span class=\"line\">div.innerHTML = parse(&#123; <span class=\"attr\">supplies</span>: [ <span class=\"string\">\"broom\"</span>, <span class=\"string\">\"mop\"</span>, <span class=\"string\">\"cleaner\"</span> ] &#125;);</span><br><span class=\"line\"><span class=\"comment\">//   &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;li&gt;broom&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;li&gt;mop&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &lt;li&gt;cleaner&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//   &lt;/ul&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"标签模板\">标签模板<a href=\"2019/10/07/ES6-Docs/ES6-string#标签模板\"></a></h2><p>模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert<span class=\"string\">`123`</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">alert(<span class=\"number\">123</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。</p>\n<p>但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">tag<span class=\"string\">`Hello <span class=\"subst\">$&#123; a + b &#125;</span> world <span class=\"subst\">$&#123; a * b &#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\">tag([<span class=\"string\">'Hello '</span>, <span class=\"string\">' world '</span>, <span class=\"string\">''</span>], <span class=\"number\">15</span>, <span class=\"number\">50</span>);</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，模板字符串前面有一个标识名<code>tag</code>，它是一个函数。整个表达式的返回值，就是<code>tag</code>函数处理模板字符串后的返回值。</p>\n<p>函数<code>tag</code>依次会接收到多个参数。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">stringArr, value1, value2</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">stringArr, ...values</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p><code>tag</code>函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。</p>\n<p><code>tag</code>函数的其他参数，都是模板字符串各个变量被替换后的值。由于本例中，模板字符串含有两个变量，因此<code>tag</code>会接受到<code>value1</code>和<code>value2</code>两个参数。</p>\n<p><code>tag</code>函数所有参数的实际值如下。</p>\n<ul>\n<li>第一个参数：<code>[&#39;Hello &#39;, &#39; world &#39;, &#39;&#39;]</code></li>\n<li>第二个参数: 15</li>\n<li>第三个参数：50</li>\n</ul>\n<p>也就是说，<code>tag</code>函数实际上以下面的形式调用。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag([<span class=\"string\">'Hello '</span>, <span class=\"string\">' world '</span>, <span class=\"string\">''</span>], <span class=\"number\">15</span>, <span class=\"number\">50</span>)</span><br></pre></td></tr></table></div></figure>\n\n<p>我们可以按照需要编写<code>tag</code>函数的代码。下面是<code>tag</code>函数的一种写法，以及运行结果。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">s, v1, v2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v1);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(v2);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"OK\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tag<span class=\"string\">`Hello <span class=\"subst\">$&#123; a + b &#125;</span> world <span class=\"subst\">$&#123; a * b&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">// \"Hello \"</span></span><br><span class=\"line\"><span class=\"comment\">// \" world \"</span></span><br><span class=\"line\"><span class=\"comment\">// \"\"</span></span><br><span class=\"line\"><span class=\"comment\">// 15</span></span><br><span class=\"line\"><span class=\"comment\">// 50</span></span><br><span class=\"line\"><span class=\"comment\">// \"OK\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>下面是一个更复杂的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> msg = passthru<span class=\"string\">`The total is <span class=\"subst\">$&#123;total&#125;</span> (<span class=\"subst\">$&#123;total*<span class=\"number\">1.05</span>&#125;</span> with tax)`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">passthru</span>(<span class=\"params\">literals</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; literals.length) &#123;</span><br><span class=\"line\">    result += literals[i++];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"built_in\">arguments</span>.length) &#123;</span><br><span class=\"line\">      result += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">msg <span class=\"comment\">// \"The total is 30 (31.5 with tax)\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面这个例子展示了，如何将各个参数按照原来的位置拼合回去。</p>\n<p><code>passthru</code>函数采用 rest 参数的写法如下。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">passthru</span>(<span class=\"params\">literals, ...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> output = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (index = <span class=\"number\">0</span>; index &lt; values.length; index++) &#123;</span><br><span class=\"line\">    output += literals[index] + values[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  output += literals[index]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>“标签模板”的一个重要应用，就是过滤 HTML 字符串，防止用户输入恶意内容。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message =</span><br><span class=\"line\">  SaferHTML<span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123;sender&#125;</span> has sent you a message.&lt;/p&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SaferHTML</span>(<span class=\"params\">templateData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> s = templateData[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg = <span class=\"built_in\">String</span>(<span class=\"built_in\">arguments</span>[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Escape special characters in the substitution.</span></span><br><span class=\"line\">    s += arg.replace(<span class=\"regexp\">/&amp;/g</span>, <span class=\"string\">\"&amp;amp;\"</span>)</span><br><span class=\"line\">            .replace(<span class=\"regexp\">/&lt;/g</span>, <span class=\"string\">\"&amp;lt;\"</span>)</span><br><span class=\"line\">            .replace(<span class=\"regexp\">/&gt;/g</span>, <span class=\"string\">\"&amp;gt;\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Don't escape special characters in the template.</span></span><br><span class=\"line\">    s += templateData[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>sender</code>变量往往是用户提供的，经过<code>SaferHTML</code>函数处理，里面的特殊字符都会被转义。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sender = <span class=\"string\">'&lt;script&gt;alert(\"abc\")&lt;/script&gt;'</span>; <span class=\"comment\">// 恶意代码</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = SaferHTML<span class=\"string\">`&lt;p&gt;<span class=\"subst\">$&#123;sender&#125;</span> has sent you a message.&lt;/p&gt;`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">message</span><br><span class=\"line\"><span class=\"comment\">// &lt;p&gt;&amp;lt;script&amp;gt;alert(\"abc\")&amp;lt;/script&amp;gt; has sent you a message.&lt;/p&gt;</span></span><br></pre></td></tr></table></div></figure>\n\n<p>标签模板的另一个应用，就是多语言转换（国际化处理）。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i18n<span class=\"string\">`Welcome to <span class=\"subst\">$&#123;siteName&#125;</span>, you are visitor number <span class=\"subst\">$&#123;visitorNumber&#125;</span>!`</span></span><br><span class=\"line\"><span class=\"comment\">// \"欢迎访问xxx，您是第xxxx位访问者！\"</span></span><br></pre></td></tr></table></div></figure>\n\n<p>模板字符串本身并不能取代 Mustache 之类的模板库，因为没有条件判断和循环处理功能，但是通过标签函数，你可以自己添加这些功能。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面的hashTemplate函数</span></span><br><span class=\"line\"><span class=\"comment\">// 是一个自定义的模板处理函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> libraryHtml = hashTemplate<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">    #for book in <span class=\"subst\">$&#123;myBooks&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">      &lt;li&gt;&lt;i&gt;#&#123;book.title&#125;&lt;/i&gt; by #&#123;book.author&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"string\">    #end</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br></pre></td></tr></table></div></figure>\n\n<p>除此之外，你甚至可以使用标签模板，在 JavaScript 语言之中嵌入其他语言。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsx<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;input</span></span><br><span class=\"line\"><span class=\"string\">      ref='input'</span></span><br><span class=\"line\"><span class=\"string\">      onChange='<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.handleChange&#125;</span>'</span></span><br><span class=\"line\"><span class=\"string\">      defaultValue='<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.state.value&#125;</span>' /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.state.value&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">   &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面的代码通过<code>jsx</code>函数，将一个 DOM 字符串转为 React 对象。你可以在 GitHub 找到<code>jsx</code>函数的<a href=\"https://gist.github.com/lygaret/a68220defa69174bdec5\" target=\"_blank\" rel=\"noopener\">具体实现</a>。</p>\n<p>下面则是一个假想的例子，通过<code>java</code>函数，在 JavaScript 代码之中运行 Java 代码。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">class HelloWorldApp &#123;</span></span><br><span class=\"line\"><span class=\"string\">  public static void main(String[] args) &#123;</span></span><br><span class=\"line\"><span class=\"string\">    System.out.println(\"Hello World!\"); // Display the string.</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br><span class=\"line\">HelloWorldApp.main();</span><br></pre></td></tr></table></div></figure>\n\n<p>模板处理函数的第一个参数（模板字符串数组），还有一个<code>raw</code>属性。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log<span class=\"string\">`123`</span></span><br><span class=\"line\"><span class=\"comment\">// [\"123\", raw: Array[1]]</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>console.log</code>接受的参数，实际上是一个数组。该数组有一个<code>raw</code>属性，保存的是转义后的原字符串。</p>\n<p>请看下面的例子。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag<span class=\"string\">`First line\\nSecond line`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strings</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(strings.raw[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// strings.raw[0] 为 \"First line\\\\nSecond line\"</span></span><br><span class=\"line\">  <span class=\"comment\">// 打印输出 \"First line\\nSecond line\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，<code>tag</code>函数的第一个参数<code>strings</code>，有一个<code>raw</code>属性，也指向一个数组。该数组的成员与<code>strings</code>数组完全一致。比如，<code>strings</code>数组是<code>[&quot;First line\\nSecond line&quot;]</code>，那么<code>strings.raw</code>数组就是<code>[&quot;First line\\\\nSecond line&quot;]</code>。两者唯一的区别，就是字符串里面的斜杠都被转义了。比如，strings.raw 数组会将<code>\\n</code>视为<code>\\\\</code>和<code>n</code>两个字符，而不是换行符。这是为了方便取得转义之前的原始模板而设计的。</p>\n<h2 id=\"模板字符串的限制\">模板字符串的限制<a href=\"2019/10/07/ES6-Docs/ES6-string#模板字符串的限制\"></a></h2><p>前面提到标签模板里面，可以内嵌其他语言。但是，模板字符串默认会将字符串转义，导致无法嵌入其他语言。</p>\n<p>举例来说，标签模板里面可以嵌入 LaTEX 语言。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">latex</span>(<span class=\"params\">strings</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">document</span> = latex<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">\\newcommand&#123;\\fun&#125;&#123;\\textbf&#123;Fun!&#125;&#125;  // 正常工作</span></span><br><span class=\"line\"><span class=\"string\">\\newcommand&#123;\\unicode&#125;&#123;\\textbf&#123;Unicode!&#125;&#125; // 报错</span></span><br><span class=\"line\"><span class=\"string\">\\newcommand&#123;\\xerxes&#125;&#123;\\textbf&#123;King!&#125;&#125; // 报错</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Breve over the h goes \\u&#123;h&#125;ere // 报错</span></span><br><span class=\"line\"><span class=\"string\">`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，变量<code>document</code>内嵌的模板字符串，对于 LaTEX 语言来说完全是合法的，但是 JavaScript 引擎会报错。原因就在于字符串的转义。</p>\n<p>模板字符串会将<code>\\u00FF</code>和<code>\\u{42}</code>当作 Unicode 字符进行转义，所以<code>\\unicode</code>解析时报错；而<code>\\x56</code>会被当作十六进制字符串转义，所以<code>\\xerxes</code>会报错。也就是说，<code>\\u</code>和<code>\\x</code>在 LaTEX 里面有特殊含义，但是 JavaScript 将它们转义了。</p>\n<p>为了解决这个问题，ES2018 <a href=\"https://tc39.github.io/proposal-template-literal-revision/\" target=\"_blank\" rel=\"noopener\">放松</a>了对标签模板里面的字符串转义的限制。如果遇到不合法的字符串转义，就返回<code>undefined</code>，而不是报错，并且从<code>raw</code>属性上面可以得到原始字符串。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">  strs[<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span></span><br><span class=\"line\">  strs.raw[<span class=\"number\">0</span>] === <span class=\"string\">\"\\\\unicode and \\\\u&#123;55&#125;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tag<span class=\"string\">`\\unicode and \\u&#123;55&#125;`</span></span><br></pre></td></tr></table></div></figure>\n\n<p>上面代码中，模板字符串原本是应该报错的，但是由于放松了对字符串转义的限制，所以不报错了，JavaScript 引擎将第一个字符设置为<code>undefined</code>，但是<code>raw</code>属性依然可以得到原始字符串，因此<code>tag</code>函数还是可以对原字符串进行处理。</p>\n<p>注意，这种对字符串转义的放松，只在标签模板解析字符串时生效，不是标签模板的场合，依然会报错。</p>\n<figure class=\"highlight\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> bad = <span class=\"string\">`bad escape sequence: \\unicode`</span>; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></div></figure>\n\n","prev":{"title":"ES6-Docs","link":"2019/10/07/ES6-Docs/ES6-index"},"next":{"title":"ES6-mixin","link":"2019/10/07/ES6-Docs/ES6-mixin"},"plink":"https://guo213.github.io/2019/10/07/ES6-Docs/ES6-string/","toc":[{"title":"字符串的扩展","id":"字符串的扩展","index":"1","children":[{"title":"字符的 Unicode 表示法","id":"字符的-Unicode-表示法","index":"1.1"},{"title":"字符串的遍历器接口","id":"字符串的遍历器接口","index":"1.2"},{"title":"直接输入 U+2028 和 U+2029","id":"直接输入-U-2028-和-U-2029","index":"1.3"},{"title":"JSON.stringify() 的改造","id":"JSON-stringify-的改造","index":"1.4"},{"title":"模板字符串","id":"模板字符串","index":"1.5"},{"title":"实例：模板编译","id":"实例：模板编译","index":"1.6"},{"title":"标签模板","id":"标签模板","index":"1.7"},{"title":"模板字符串的限制","id":"模板字符串的限制","index":"1.8"}]}]}